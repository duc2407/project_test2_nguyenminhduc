{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _elements = require(\"@react-navigation/elements\");\nvar _native = require(\"@react-navigation/native\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _ModalPresentationContext = _interopRequireDefault(require(\"../../utils/ModalPresentationContext\"));\nvar _useKeyboardManager2 = _interopRequireDefault(require(\"../../utils/useKeyboardManager\"));\nvar _Card = _interopRequireDefault(require(\"./Card\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar EPSILON = 0.1;\nfunction CardContainer(_ref) {\n  var interpolationIndex = _ref.interpolationIndex,\n    index = _ref.index,\n    active = _ref.active,\n    closing = _ref.closing,\n    gesture = _ref.gesture,\n    focused = _ref.focused,\n    modal = _ref.modal,\n    getPreviousScene = _ref.getPreviousScene,\n    getFocusedRoute = _ref.getFocusedRoute,\n    headerDarkContent = _ref.headerDarkContent,\n    hasAbsoluteFloatHeader = _ref.hasAbsoluteFloatHeader,\n    headerHeight = _ref.headerHeight,\n    onHeaderHeightChange = _ref.onHeaderHeightChange,\n    isParentHeaderShown = _ref.isParentHeaderShown,\n    isNextScreenTransparent = _ref.isNextScreenTransparent,\n    detachCurrentScreen = _ref.detachCurrentScreen,\n    layout = _ref.layout,\n    onCloseRoute = _ref.onCloseRoute,\n    onOpenRoute = _ref.onOpenRoute,\n    onGestureCancel = _ref.onGestureCancel,\n    onGestureEnd = _ref.onGestureEnd,\n    onGestureStart = _ref.onGestureStart,\n    onTransitionEnd = _ref.onTransitionEnd,\n    onTransitionStart = _ref.onTransitionStart,\n    renderHeader = _ref.renderHeader,\n    renderScene = _ref.renderScene,\n    safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n    safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n    safeAreaInsetRight = _ref.safeAreaInsetRight,\n    safeAreaInsetTop = _ref.safeAreaInsetTop,\n    scene = _ref.scene;\n  var parentHeaderHeight = React.useContext(_elements.HeaderHeightContext);\n  var _useKeyboardManager = (0, _useKeyboardManager2.default)(React.useCallback(function () {\n      var _scene$descriptor = scene.descriptor,\n        options = _scene$descriptor.options,\n        navigation = _scene$descriptor.navigation;\n      return navigation.isFocused() && options.keyboardHandlingEnabled !== false;\n    }, [scene.descriptor])),\n    onPageChangeStart = _useKeyboardManager.onPageChangeStart,\n    onPageChangeCancel = _useKeyboardManager.onPageChangeCancel,\n    onPageChangeConfirm = _useKeyboardManager.onPageChangeConfirm;\n  var handleOpen = function handleOpen() {\n    var route = scene.descriptor.route;\n    onTransitionEnd({\n      route: route\n    }, false);\n    onOpenRoute({\n      route: route\n    });\n  };\n  var handleClose = function handleClose() {\n    var route = scene.descriptor.route;\n    onTransitionEnd({\n      route: route\n    }, true);\n    onCloseRoute({\n      route: route\n    });\n  };\n  var handleGestureBegin = function handleGestureBegin() {\n    var route = scene.descriptor.route;\n    onPageChangeStart();\n    onGestureStart({\n      route: route\n    });\n  };\n  var handleGestureCanceled = function handleGestureCanceled() {\n    var route = scene.descriptor.route;\n    onPageChangeCancel();\n    onGestureCancel({\n      route: route\n    });\n  };\n  var handleGestureEnd = function handleGestureEnd() {\n    var route = scene.descriptor.route;\n    onGestureEnd({\n      route: route\n    });\n  };\n  var handleTransition = function handleTransition(_ref2) {\n    var closing = _ref2.closing,\n      gesture = _ref2.gesture;\n    var route = scene.descriptor.route;\n    if (!gesture) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: route\n    }, closing);\n  };\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n  var _useTheme = (0, _native.useTheme)(),\n    colors = _useTheme.colors;\n  var _React$useState = React.useState('box-none'),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    pointerEvents = _React$useState2[0],\n    setPointerEvents = _React$useState2[1];\n  React.useEffect(function () {\n    var _scene$progress$next, _scene$progress$next$;\n    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  var _scene$descriptor$opt = scene.descriptor.options,\n    presentation = _scene$descriptor$opt.presentation,\n    animationEnabled = _scene$descriptor$opt.animationEnabled,\n    cardOverlay = _scene$descriptor$opt.cardOverlay,\n    cardOverlayEnabled = _scene$descriptor$opt.cardOverlayEnabled,\n    cardShadowEnabled = _scene$descriptor$opt.cardShadowEnabled,\n    cardStyle = _scene$descriptor$opt.cardStyle,\n    cardStyleInterpolator = _scene$descriptor$opt.cardStyleInterpolator,\n    gestureDirection = _scene$descriptor$opt.gestureDirection,\n    gestureEnabled = _scene$descriptor$opt.gestureEnabled,\n    gestureResponseDistance = _scene$descriptor$opt.gestureResponseDistance,\n    gestureVelocityImpact = _scene$descriptor$opt.gestureVelocityImpact,\n    headerMode = _scene$descriptor$opt.headerMode,\n    headerShown = _scene$descriptor$opt.headerShown,\n    transitionSpec = _scene$descriptor$opt.transitionSpec;\n  var previousScene = getPreviousScene({\n    route: scene.descriptor.route\n  });\n  var backTitle;\n  if (previousScene) {\n    var _previousScene$descri = previousScene.descriptor,\n      options = _previousScene$descri.options,\n      route = _previousScene$descri.route;\n    backTitle = (0, _elements.getHeaderTitle)(options, route.name);\n  }\n  var headerBack = React.useMemo(function () {\n    return backTitle !== undefined ? {\n      title: backTitle\n    } : undefined;\n  }, [backTitle]);\n  return React.createElement(_Card.default, {\n    interpolationIndex: interpolationIndex,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: index === 0 ? false : gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode !== 'float' && presentation !== 'modal',\n    headerDarkContent: headerDarkContent,\n    containerStyle: hasAbsoluteFloatHeader && headerMode !== 'screen' ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: presentation === 'transparentModal' ? 'transparent' : colors.background\n    }, cardStyle],\n    style: [{\n      overflow: active ? undefined : 'hidden',\n      display:\n      animationEnabled === false && isNextScreenTransparent === false && detachCurrentScreen !== false && !focused ? 'none' : 'flex'\n    }, _reactNative.StyleSheet.absoluteFill]\n  }, React.createElement(_reactNative.View, {\n    style: styles.container\n  }, React.createElement(_ModalPresentationContext.default.Provider, {\n    value: modal\n  }, React.createElement(_reactNative.View, {\n    style: styles.scene\n  }, React.createElement(_elements.HeaderBackContext.Provider, {\n    value: headerBack\n  }, React.createElement(_elements.HeaderShownContext.Provider, {\n    value: isParentHeaderShown || headerShown !== false\n  }, React.createElement(_elements.HeaderHeightContext.Provider, {\n    value: headerShown ? headerHeight : parentHeaderHeight !== null && parentHeaderHeight !== void 0 ? parentHeaderHeight : 0\n  }, renderScene({\n    route: scene.descriptor.route\n  }))))), headerMode !== 'float' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    scenes: [previousScene, scene],\n    getPreviousScene: getPreviousScene,\n    getFocusedRoute: getFocusedRoute,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null)));\n}\nvar _default = React.memo(CardContainer);\nexports.default = _default;\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["CardContainer.tsx"],"names":["EPSILON","CardContainer","interpolationIndex","index","active","closing","gesture","focused","modal","getPreviousScene","getFocusedRoute","headerDarkContent","hasAbsoluteFloatHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","isNextScreenTransparent","detachCurrentScreen","layout","onCloseRoute","onOpenRoute","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","parentHeaderHeight","React","useContext","HeaderHeightContext","onPageChangeStart","onPageChangeCancel","onPageChangeConfirm","useKeyboardManager","useCallback","options","navigation","descriptor","isFocused","keyboardHandlingEnabled","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","insets","top","right","bottom","left","colors","useTheme","pointerEvents","setPointerEvents","useState","useEffect","listener","progress","next","addListener","value","removeListener","presentation","animationEnabled","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","headerMode","headerShown","transitionSpec","previousScene","backTitle","getHeaderTitle","name","headerBack","useMemo","undefined","title","current","marginTop","backgroundColor","background","overflow","display","StyleSheet","absoluteFill","styles","container","mode","scenes","onContentHeightChange","memo","create","flex","flexDirection"],"mappings":"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","sourcesContent":["import {\n  getHeaderTitle,\n  HeaderBackContext,\n  HeaderHeightContext,\n  HeaderShownContext,\n} from '@react-navigation/elements';\nimport { Route, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\n\nimport type { Layout, Scene } from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport useKeyboardManager from '../../utils/useKeyboardManager';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\n\ntype Props = {\n  interpolationIndex: number;\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  modal: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene;\n  headerDarkContent: boolean | undefined;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  hasAbsoluteFloatHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n  isNextScreenTransparent: boolean;\n  detachCurrentScreen: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  interpolationIndex,\n  index,\n  active,\n  closing,\n  gesture,\n  focused,\n  modal,\n  getPreviousScene,\n  getFocusedRoute,\n  headerDarkContent,\n  hasAbsoluteFloatHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  isNextScreenTransparent,\n  detachCurrentScreen,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n}: Props) {\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const { onPageChangeStart, onPageChangeCancel, onPageChangeConfirm } =\n    useKeyboardManager(\n      React.useCallback(() => {\n        const { options, navigation } = scene.descriptor;\n\n        return (\n          navigation.isFocused() && options.keyboardHandlingEnabled !== false\n        );\n      }, [scene.descriptor])\n    );\n\n  const handleOpen = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeStart();\n    onGestureStart({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeCancel();\n    onGestureCancel({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene.descriptor;\n\n    onGestureEnd({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene.descriptor;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const {\n    presentation,\n    animationEnabled,\n    cardOverlay,\n    cardOverlayEnabled,\n    cardShadowEnabled,\n    cardStyle,\n    cardStyleInterpolator,\n    gestureDirection,\n    gestureEnabled,\n    gestureResponseDistance,\n    gestureVelocityImpact,\n    headerMode,\n    headerShown,\n    transitionSpec,\n  } = scene.descriptor.options;\n\n  const previousScene = getPreviousScene({ route: scene.descriptor.route });\n\n  let backTitle: string | undefined;\n\n  if (previousScene) {\n    const { options, route } = previousScene.descriptor;\n\n    backTitle = getHeaderTitle(options, route.name);\n  }\n\n  const headerBack = React.useMemo(\n    () => (backTitle !== undefined ? { title: backTitle } : undefined),\n    [backTitle]\n  );\n\n  return (\n    <Card\n      interpolationIndex={interpolationIndex}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={index === 0 ? false : gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode !== 'float' && presentation !== 'modal'}\n      headerDarkContent={headerDarkContent}\n      containerStyle={\n        hasAbsoluteFloatHeader && headerMode !== 'screen'\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[\n        {\n          backgroundColor:\n            presentation === 'transparentModal'\n              ? 'transparent'\n              : colors.background,\n        },\n        cardStyle,\n      ]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n          display:\n            // Hide unfocused screens when animation isn't enabled\n            // This is also necessary for a11y on web\n            animationEnabled === false &&\n            isNextScreenTransparent === false &&\n            detachCurrentScreen !== false &&\n            !focused\n              ? 'none'\n              : 'flex',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <ModalPresentationContext.Provider value={modal}>\n          <View style={styles.scene}>\n            <HeaderBackContext.Provider value={headerBack}>\n              <HeaderShownContext.Provider\n                value={isParentHeaderShown || headerShown !== false}\n              >\n                <HeaderHeightContext.Provider\n                  value={headerShown ? headerHeight : parentHeaderHeight ?? 0}\n                >\n                  {renderScene({ route: scene.descriptor.route })}\n                </HeaderHeightContext.Provider>\n              </HeaderShownContext.Provider>\n            </HeaderBackContext.Provider>\n          </View>\n          {headerMode !== 'float'\n            ? renderHeader({\n                mode: 'screen',\n                layout,\n                scenes: [previousScene, scene],\n                getPreviousScene,\n                getFocusedRoute,\n                onContentHeightChange: onHeaderHeightChange,\n              })\n            : null}\n        </ModalPresentationContext.Provider>\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}