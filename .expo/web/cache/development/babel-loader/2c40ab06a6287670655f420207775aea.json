{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _elements = require(\"@react-navigation/elements\");\nvar _native = require(\"@react-navigation/native\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\nvar _ModalPresentationContext = _interopRequireDefault(require(\"../../utils/ModalPresentationContext\"));\nvar _GestureHandler = require(\"../GestureHandler\");\nvar _HeaderContainer = _interopRequireDefault(require(\"../Header/HeaderContainer\"));\nvar _CardStack = _interopRequireDefault(require(\"./CardStack\"));\nvar _excluded = [\"state\", \"descriptors\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar GestureHandlerWrapper = _GestureHandler.GestureHandlerRootView !== null && _GestureHandler.GestureHandlerRootView !== void 0 ? _GestureHandler.GestureHandlerRootView : _reactNative.View;\n\nvar isArrayEqual = function isArrayEqual(a, b) {\n  return a.length === b.length && a.every(function (it, index) {\n    return it === b[index];\n  });\n};\nvar StackView = function (_React$Component) {\n  (0, _inherits2.default)(StackView, _React$Component);\n  var _super = _createSuper(StackView);\n  function StackView() {\n    var _this;\n    (0, _classCallCheck2.default)(this, StackView);\n    _this = _super.apply(this, arguments);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getPreviousRoute\", function (_ref) {\n      var route = _ref.route;\n      var _this$state = _this.state,\n        closingRouteKeys = _this$state.closingRouteKeys,\n        replacingRouteKeys = _this$state.replacingRouteKeys;\n      var routes = _this.state.routes.filter(function (r) {\n        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);\n      });\n      var index = routes.findIndex(function (r) {\n        return r.key === route.key;\n      });\n      return routes[index - 1];\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"renderScene\", function (_ref2) {\n      var route = _ref2.route;\n      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];\n      if (!descriptor) {\n        return null;\n      }\n      return descriptor.render();\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"renderHeader\", function (props) {\n      return React.createElement(_HeaderContainer.default, props);\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleOpenRoute\", function (_ref3) {\n      var route = _ref3.route;\n      var _this$props = _this.props,\n        state = _this$props.state,\n        navigation = _this$props.navigation;\n      var _this$state2 = _this.state,\n        closingRouteKeys = _this$state2.closingRouteKeys,\n        replacingRouteKeys = _this$state2.replacingRouteKeys;\n      if (closingRouteKeys.some(function (key) {\n        return key === route.key;\n      }) && replacingRouteKeys.every(function (key) {\n        return key !== route.key;\n      }) && state.routeNames.includes(route.name) && !state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.navigate(route);\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {\n              return !state.replacingRouteKeys.includes(r.key);\n            }) : state.routes,\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            replacingRouteKeys: []\n          };\n        });\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleCloseRoute\", function (_ref4) {\n      var route = _ref4.route;\n      var _this$props2 = _this.props,\n        state = _this$props2.state,\n        navigation = _this$props2.navigation;\n      if (state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch((0, _extends3.default)({}, _native.StackActions.pop(), {\n          source: route.key,\n          target: state.key\n        }));\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.routes.filter(function (r) {\n              return r.key !== route.key;\n            }),\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            })\n          };\n        });\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleTransitionStart\", function (_ref5, closing) {\n      var route = _ref5.route;\n      return _this.props.navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleTransitionEnd\", function (_ref6, closing) {\n      var route = _ref6.route;\n      return _this.props.navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleGestureStart\", function (_ref7) {\n      var route = _ref7.route;\n      _this.props.navigation.emit({\n        type: 'gestureStart',\n        target: route.key\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleGestureEnd\", function (_ref8) {\n      var route = _ref8.route;\n      _this.props.navigation.emit({\n        type: 'gestureEnd',\n        target: route.key\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleGestureCancel\", function (_ref9) {\n      var route = _ref9.route;\n      _this.props.navigation.emit({\n        type: 'gestureCancel',\n        target: route.key\n      });\n    });\n    return _this;\n  }\n  (0, _createClass2.default)(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props3 = this.props,\n        state = _this$props3.state,\n        _ = _this$props3.descriptors,\n        rest = (0, _objectWithoutProperties2.default)(_this$props3, _excluded);\n      var _this$state3 = this.state,\n        routes = _this$state3.routes,\n        descriptors = _this$state3.descriptors,\n        openingRouteKeys = _this$state3.openingRouteKeys,\n        closingRouteKeys = _this$state3.closingRouteKeys;\n      return React.createElement(GestureHandlerWrapper, {\n        style: styles.container\n      }, React.createElement(_elements.SafeAreaProviderCompat, null, React.createElement(_reactNativeSafeAreaContext.SafeAreaInsetsContext.Consumer, null, function (insets) {\n        return React.createElement(_ModalPresentationContext.default.Consumer, null, function (isParentModal) {\n          return React.createElement(_elements.HeaderShownContext.Consumer, null, function (isParentHeaderShown) {\n            return React.createElement(_CardStack.default, _extends({\n              insets: insets,\n              isParentHeaderShown: isParentHeaderShown,\n              isParentModal: isParentModal,\n              getPreviousRoute: _this2.getPreviousRoute,\n              routes: routes,\n              openingRouteKeys: openingRouteKeys,\n              closingRouteKeys: closingRouteKeys,\n              onOpenRoute: _this2.handleOpenRoute,\n              onCloseRoute: _this2.handleCloseRoute,\n              onTransitionStart: _this2.handleTransitionStart,\n              onTransitionEnd: _this2.handleTransitionEnd,\n              renderHeader: _this2.renderHeader,\n              renderScene: _this2.renderScene,\n              state: state,\n              descriptors: descriptors,\n              onGestureStart: _this2.handleGestureStart,\n              onGestureEnd: _this2.handleGestureEnd,\n              onGestureCancel: _this2.handleGestureCancel\n            }, rest));\n          });\n        });\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(function (r) {\n        return r.key;\n      }), state.previousRoutes.map(function (r) {\n        return r.key;\n      }))) && state.routes.length) {\n        var _routes = state.routes;\n        var _previousRoutes = state.previousRoutes;\n        var _descriptors = props.descriptors;\n        var previousDescriptors = state.previousDescriptors;\n        if (props.descriptors !== state.previousDescriptors) {\n          _descriptors = state.routes.reduce(function (acc, route) {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n          previousDescriptors = props.descriptors;\n        }\n        if (props.state.routes !== state.previousRoutes) {\n          var map = props.state.routes.reduce(function (acc, route) {\n            acc[route.key] = route;\n            return acc;\n          }, {});\n          _routes = state.routes.map(function (route) {\n            return map[route.key] || route;\n          });\n          _previousRoutes = props.state.routes;\n        }\n        return {\n          routes: _routes,\n          previousRoutes: _previousRoutes,\n          descriptors: _descriptors,\n          previousDescriptors: previousDescriptors\n        };\n      }\n\n      var routes = props.state.index < props.state.routes.length - 1 ?\n      props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n\n      var openingRouteKeys = state.openingRouteKeys,\n        closingRouteKeys = state.closingRouteKeys,\n        replacingRouteKeys = state.replacingRouteKeys,\n        previousRoutes = state.previousRoutes;\n      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      var nextFocusedRoute = routes[routes.length - 1];\n      var isAnimationEnabled = function isAnimationEnabled(key) {\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animationEnabled !== false : true;\n      };\n      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {\n        var _descriptor$options$a;\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : 'push';\n      };\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        if (!previousRoutes.some(function (r) {\n          return r.key === nextFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            openingRouteKeys = [].concat((0, _toConsumableArray2.default)(openingRouteKeys), [nextFocusedRoute.key]);\n            closingRouteKeys = closingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            if (!routes.some(function (r) {\n              return r.key === previousFocusedRoute.key;\n            })) {\n              openingRouteKeys = openingRouteKeys.filter(function (key) {\n                return key !== previousFocusedRoute.key;\n              });\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [].concat((0, _toConsumableArray2.default)(closingRouteKeys), [previousFocusedRoute.key]);\n\n                openingRouteKeys = openingRouteKeys.filter(function (key) {\n                  return key !== nextFocusedRoute.key;\n                });\n\n                routes = [].concat((0, _toConsumableArray2.default)(routes), [previousFocusedRoute]);\n              } else {\n                replacingRouteKeys = [].concat((0, _toConsumableArray2.default)(replacingRouteKeys), [previousFocusedRoute.key]);\n                closingRouteKeys = closingRouteKeys.filter(function (key) {\n                  return key !== previousFocusedRoute.key;\n                });\n\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.some(function (r) {\n          return r.key === previousFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [].concat((0, _toConsumableArray2.default)(closingRouteKeys), [previousFocusedRoute.key]);\n\n            openingRouteKeys = openingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n\n            routes = [].concat((0, _toConsumableArray2.default)(routes), [previousFocusedRoute]);\n          }\n        } else {\n        }\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        var _routes2;\n        routes = routes.slice();\n        (_routes2 = routes).splice.apply(_routes2, [routes.length - 1, 0].concat((0, _toConsumableArray2.default)(state.routes.filter(function (_ref10) {\n          var key = _ref10.key;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }))));\n      }\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n      var descriptors = routes.reduce(function (acc, route) {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes: routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys: openingRouteKeys,\n        closingRouteKeys: closingRouteKeys,\n        replacingRouteKeys: replacingRouteKeys,\n        descriptors: descriptors\n      };\n    }\n  }]);\n  return StackView;\n}(React.Component);\nexports.default = StackView;\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["GestureHandlerWrapper","GestureHandlerRootView","View","isArrayEqual","a","b","length","every","it","index","StackView","_defineProperty","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","_ref","state","filter","r","key","includes","findIndex","_ref2","descriptor","props","render","React","HeaderContainer","_ref3","navigation","some","routeNames","name","navigate","setState","_ref4","dispatch","StackActions","pop","source","target","closing","_ref5","emit","type","data","_ref6","_ref7","_ref8","_ref9","_","rest","style","styles","container","SafeAreaProviderCompat","SafeAreaInsetsContext","Consumer","insets","ModalPresentationContext","isParentModal","HeaderShownContext","isParentHeaderShown","CardStack","getPreviousRoute","onOpenRoute","handleOpenRoute","onCloseRoute","handleCloseRoute","onTransitionStart","handleTransitionStart","onTransitionEnd","handleTransitionEnd","renderHeader","renderScene","onGestureStart","handleGestureStart","onGestureEnd","handleGestureEnd","onGestureCancel","handleGestureCancel","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","options","animationEnabled","getAnimationTypeForReplace","animationTypeForReplace","splice","_ref10","Error","Component","StyleSheet","create","flex"],"sources":["StackView.tsx"],"sourcesContent":["import {\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  ParamListBase,\n  Route,\n  StackActions,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport {\n  EdgeInsets,\n  SafeAreaInsetsContext,\n} from 'react-native-safe-area-context';\n\nimport type {\n  StackDescriptorMap,\n  StackNavigationConfig,\n  StackNavigationHelpers,\n} from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport CardStack from './CardStack';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState<ParamListBase>;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const { routes, descriptors, openingRouteKeys, closingRouteKeys } =\n      this.state;\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaInsetsContext.Consumer>\n            {(insets) => (\n              <ModalPresentationContext.Consumer>\n                {(isParentModal) => (\n                  <HeaderShownContext.Consumer>\n                    {(isParentHeaderShown) => (\n                      <CardStack\n                        insets={insets as EdgeInsets}\n                        isParentHeaderShown={isParentHeaderShown}\n                        isParentModal={isParentModal}\n                        getPreviousRoute={this.getPreviousRoute}\n                        routes={routes}\n                        openingRouteKeys={openingRouteKeys}\n                        closingRouteKeys={closingRouteKeys}\n                        onOpenRoute={this.handleOpenRoute}\n                        onCloseRoute={this.handleCloseRoute}\n                        onTransitionStart={this.handleTransitionStart}\n                        onTransitionEnd={this.handleTransitionEnd}\n                        renderHeader={this.renderHeader}\n                        renderScene={this.renderScene}\n                        state={state}\n                        descriptors={descriptors}\n                        onGestureStart={this.handleGestureStart}\n                        onGestureEnd={this.handleGestureEnd}\n                        onGestureCancel={this.handleGestureCancel}\n                        {...rest}\n                      />\n                    )}\n                  </HeaderShownContext.Consumer>\n                )}\n              </ModalPresentationContext.Consumer>\n            )}\n          </SafeAreaInsetsContext.Consumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}