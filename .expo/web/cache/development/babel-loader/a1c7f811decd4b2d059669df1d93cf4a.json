{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.onGestureHandlerEvent = onGestureHandlerEvent;\nexports.startListening = startListening;\nexports.stopListening = stopListening;\nvar _reactNative = require(\"react-native\");\nvar _State = require(\"../../State\");\nvar _TouchEventType = require(\"../../TouchEventType\");\nvar _handlersRegistry = require(\"../handlersRegistry\");\nvar _utils = require(\"../../utils\");\nvar gestureHandlerEventSubscription = null;\nvar gestureHandlerStateChangeEventSubscription = null;\nvar warningMessage = (0, _utils.tagMessage)('You have to use react-native-reanimated in order to control the state of the gesture.');\nvar dummyStateManager = {\n  begin: function begin() {\n    console.warn(warningMessage);\n  },\n  activate: function activate() {\n    console.warn(warningMessage);\n  },\n  end: function end() {\n    console.warn(warningMessage);\n  },\n  fail: function fail() {\n    console.warn(warningMessage);\n  }\n};\nvar lastUpdateEvent = [];\nfunction isStateChangeEvent(event) {\n  return event.oldState != null;\n}\nfunction isTouchEvent(event) {\n  return event.eventType != null;\n}\nfunction onGestureHandlerEvent(event) {\n  var _handler$handlers7, _handler$handlers7$on, _handler$handlers8, _handler$handlers8$on, _handler$handlers9, _handler$handlers9$on, _handler$handlers10, _handler$handlers10$o;\n  var handler = (0, _handlersRegistry.findHandler)(event.handlerTag);\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {\n        var _handler$handlers$onB, _handler$handlers;\n        (_handler$handlers$onB = (_handler$handlers = handler.handlers).onBegin) === null || _handler$handlers$onB === void 0 ? void 0 : _handler$handlers$onB.call(_handler$handlers, event);\n      } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {\n        var _handler$handlers$onS, _handler$handlers2;\n        (_handler$handlers$onS = (_handler$handlers2 = handler.handlers).onStart) === null || _handler$handlers$onS === void 0 ? void 0 : _handler$handlers$onS.call(_handler$handlers2, event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === _State.State.END) {\n        var _handler$handlers$onF, _handler$handlers4;\n        if (event.oldState === _State.State.ACTIVE) {\n          var _handler$handlers$onE, _handler$handlers3;\n          (_handler$handlers$onE = (_handler$handlers3 = handler.handlers).onEnd) === null || _handler$handlers$onE === void 0 ? void 0 : _handler$handlers$onE.call(_handler$handlers3, event, true);\n        }\n        (_handler$handlers$onF = (_handler$handlers4 = handler.handlers).onFinalize) === null || _handler$handlers$onF === void 0 ? void 0 : _handler$handlers$onF.call(_handler$handlers4, event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.oldState !== event.state) {\n        var _handler$handlers$onF2, _handler$handlers6;\n        if (event.oldState === _State.State.ACTIVE) {\n          var _handler$handlers$onE2, _handler$handlers5;\n          (_handler$handlers$onE2 = (_handler$handlers5 = handler.handlers).onEnd) === null || _handler$handlers$onE2 === void 0 ? void 0 : _handler$handlers$onE2.call(_handler$handlers5, event, false);\n        }\n        (_handler$handlers$onF2 = (_handler$handlers6 = handler.handlers).onFinalize) === null || _handler$handlers$onF2 === void 0 ? void 0 : _handler$handlers$onF2.call(_handler$handlers6, event, false);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      switch (event.eventType) {\n        case _TouchEventType.TouchEventType.TOUCHES_DOWN:\n          (_handler$handlers7 = handler.handlers) === null || _handler$handlers7 === void 0 ? void 0 : (_handler$handlers7$on = _handler$handlers7.onTouchesDown) === null || _handler$handlers7$on === void 0 ? void 0 : _handler$handlers7$on.call(_handler$handlers7, event, dummyStateManager);\n          break;\n        case _TouchEventType.TouchEventType.TOUCHES_MOVE:\n          (_handler$handlers8 = handler.handlers) === null || _handler$handlers8 === void 0 ? void 0 : (_handler$handlers8$on = _handler$handlers8.onTouchesMove) === null || _handler$handlers8$on === void 0 ? void 0 : _handler$handlers8$on.call(_handler$handlers8, event, dummyStateManager);\n          break;\n        case _TouchEventType.TouchEventType.TOUCHES_UP:\n          (_handler$handlers9 = handler.handlers) === null || _handler$handlers9 === void 0 ? void 0 : (_handler$handlers9$on = _handler$handlers9.onTouchesUp) === null || _handler$handlers9$on === void 0 ? void 0 : _handler$handlers9$on.call(_handler$handlers9, event, dummyStateManager);\n          break;\n        case _TouchEventType.TouchEventType.TOUCHES_CANCELLED:\n          (_handler$handlers10 = handler.handlers) === null || _handler$handlers10 === void 0 ? void 0 : (_handler$handlers10$o = _handler$handlers10.onTouchesCancelled) === null || _handler$handlers10$o === void 0 ? void 0 : _handler$handlers10$o.call(_handler$handlers10, event, dummyStateManager);\n          break;\n      }\n    } else {\n      var _handler$handlers$onU, _handler$handlers11;\n      (_handler$handlers$onU = (_handler$handlers11 = handler.handlers).onUpdate) === null || _handler$handlers$onU === void 0 ? void 0 : _handler$handlers$onU.call(_handler$handlers11, event);\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        var _handler$handlers$onC, _handler$handlers12, _handler$handlers$cha, _handler$handlers13;\n        (_handler$handlers$onC = (_handler$handlers12 = handler.handlers).onChange) === null || _handler$handlers$onC === void 0 ? void 0 : _handler$handlers$onC.call(_handler$handlers12, (_handler$handlers$cha = (_handler$handlers13 = handler.handlers).changeEventCalculator) === null || _handler$handlers$cha === void 0 ? void 0 : _handler$handlers$cha.call(_handler$handlers13, event, lastUpdateEvent[handler.handlers.handlerTag]));\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    var oldHandler = (0, _handlersRegistry.findOldGestureHandler)(event.handlerTag);\n    if (oldHandler) {\n      var nativeEvent = {\n        nativeEvent: event\n      };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\nfunction startListening() {\n  stopListening();\n  gestureHandlerEventSubscription = _reactNative.DeviceEventEmitter.addListener('onGestureHandlerEvent', onGestureHandlerEvent);\n  gestureHandlerStateChangeEventSubscription = _reactNative.DeviceEventEmitter.addListener('onGestureHandlerStateChange', onGestureHandlerEvent);\n}\nfunction stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}","map":{"version":3,"sources":["eventReceiver.ts"],"names":["gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","warningMessage","tagMessage","dummyStateManager","begin","console","warn","activate","end","fail","lastUpdateEvent","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","handler","findHandler","handlerTag","State","UNDETERMINED","state","BEGAN","handlers","onBegin","ACTIVE","onStart","END","onEnd","onFinalize","undefined","FAILED","CANCELLED","TouchEventType","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","onUpdate","onChange","changeEventCalculator","oldHandler","findOldGestureHandler","nativeEvent","onGestureStateChange","onGestureEvent","startListening","stopListening","DeviceEventEmitter","addListener","remove"],"mappings":"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","sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport { findHandler, findOldGestureHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\nimport { tagMessage } from '../../utils';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null = null;\n\nconst warningMessage = tagMessage(\n  'You have to use react-native-reanimated in order to control the state of the gesture.'\n);\n\nconst dummyStateManager: GestureStateManagerType = {\n  begin: () => {\n    console.warn(warningMessage);\n  },\n  activate: () => {\n    console.warn(warningMessage);\n  },\n  end: () => {\n    console.warn(warningMessage);\n  },\n  fail: () => {\n    console.warn(warningMessage);\n  },\n};\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nexport function onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, dummyStateManager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, dummyStateManager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, dummyStateManager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, dummyStateManager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    const oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      const nativeEvent = { nativeEvent: event };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}