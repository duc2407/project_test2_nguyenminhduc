{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasProperty = hasProperty;\nexports.isFabric = isFabric;\nexports.isJestEnv = isJestEnv;\nexports.isRemoteDebuggingEnabled = isRemoteDebuggingEnabled;\nexports.shouldUseCodegenNativeComponent = shouldUseCodegenNativeComponent;\nexports.tagMessage = tagMessage;\nexports.toArray = toArray;\nexports.withPrevAndCurrent = withPrevAndCurrent;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _package = _interopRequireDefault(require(\"react-native/package.json\"));\nvar rnVersion = _package.default.version;\nfunction toArray(object) {\n  if (!Array.isArray(object)) {\n    return [object];\n  }\n  return object;\n}\nfunction withPrevAndCurrent(array, mapFn) {\n  var previousArr = [null];\n  var currentArr = (0, _toConsumableArray2.default)(array);\n  var transformedArr = [];\n  currentArr.forEach(function (current, i) {\n    var previous = previousArr[i];\n    var transformed = mapFn(previous, current);\n    previousArr.push(transformed);\n    transformedArr.push(transformed);\n  });\n  return transformedArr;\n}\n\nfunction hasProperty(object, key) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\nfunction isJestEnv() {\n  return hasProperty(global, 'process') && !!process.env.JEST_WORKER_ID;\n}\nfunction tagMessage(msg) {\n  return \"[react-native-gesture-handler] \" + msg;\n}\n\nfunction isFabric() {\n  var _global;\n\n  return !!((_global = global) !== null && _global !== void 0 && _global.nativeFabricUIManager);\n}\nfunction shouldUseCodegenNativeComponent() {\n  var _rnVersion$split = rnVersion.split('.'),\n    _rnVersion$split2 = (0, _slicedToArray2.default)(_rnVersion$split, 2),\n    majorStr = _rnVersion$split2[0],\n    minorStr = _rnVersion$split2[1];\n  var major = Number.parseInt(majorStr);\n  var minor = Number.parseInt(minorStr);\n\n  return minor >= 68 || major > 0;\n}\nfunction isRemoteDebuggingEnabled() {\n  return !global.nativeCallSyncHook || global.__REMOTEDEV__;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA;AAEA,IAAMA,SAAS,GAAGC,gBAAI,CAACC,OAAvB;AAEO,SAASC,OAAT,CAAoBC,MAApB,EAA0C;EAC/C,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAL,EAA4B;IAC1B,OAAO,CAACA,MAAD,CAAP;EACD;EAED,OAAOA,MAAP;AACD;AAMM,SAASG,kBAAT,CACLC,KADK,EAELC,KAFK,EAGU;EACf,IAAMC,WAAmC,GAAG,CAAC,IAAD,CAA5C;EACA,IAAMC,UAAU,oCAAOH,KAAJ,CAAnB;EACA,IAAMI,cAA6B,GAAG,EAAtC;EACAD,UAAU,CAACE,OAAX,CAAmB,UAACC,OAAD,EAAUC,CAAV,EAAgB;IACjC,IAAMC,QAAQ,GAAGN,WAAW,CAACK,CAAD,CAA5B;IACA,IAAME,WAAW,GAAGR,KAAK,CAACO,QAAD,EAAWF,OAAX,CAAzB;IACAJ,WAAW,CAACQ,IAAZ,CAAiBD,WAAjB;IACAL,cAAc,CAACM,IAAf,CAAoBD,WAApB;EACD,CALD;EAMA,OAAOL,cAAP;AACD;;AAGM,SAASO,WAAT,CAAqBf,MAArB,EAAqCgB,GAArC,EAAkD;EACvD,OAAOC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCpB,MAArC,EAA6CgB,GAA7C,CAAP;AACD;AAEM,SAASK,SAAT,GAA8B;EAEnC,OAAON,WAAW,CAACO,MAAD,EAAS,SAAT,CAAX,IAAkC,CAAC,CAACC,OAAO,CAACC,GAAR,CAAYC,cAAvD;AACD;AAEM,SAASC,UAAT,CAAoBC,GAApB,EAAiC;EACtC,2CAAyCA,GAAI;AAC9C;;AAIM,SAASC,QAAT,GAA6B;EAAA;;EAElC,OAAO,CAAC,aAACN,MAAD,oCAACO,QAAQC,qBAAT,CAAR;AACD;AAEM,SAASC,+BAAT,GAAoD;EACzD,uBAA6BnC,SAAS,CAACoC,KAAV,CAAgB,GAAhB,CAA7B;IAAA;IAAOC,QAAD;IAAWC,QAAX;EACN,IAAMC,KAAK,GAAGC,MAAM,CAACC,QAAP,CAAgBJ,QAAhB,CAAd;EACA,IAAMK,KAAK,GAAGF,MAAM,CAACC,QAAP,CAAgBH,QAAhB,CAAd;;EAGA,OAAOI,KAAK,IAAI,EAAT,IAAeH,KAAK,GAAG,CAA9B;AACD;AAEM,SAASI,wBAAT,GAA6C;EAGlD,OAAO,CAAEjB,MAAD,CAAgBkB,kBAAjB,IAAwClB,MAAD,CAAgBmB,aAA9D;AACD","names":["rnVersion","pack","version","toArray","object","Array","isArray","withPrevAndCurrent","array","mapFn","previousArr","currentArr","transformedArr","forEach","current","i","previous","transformed","push","hasProperty","key","Object","prototype","hasOwnProperty","call","isJestEnv","global","process","env","JEST_WORKER_ID","tagMessage","msg","isFabric","_global","nativeFabricUIManager","shouldUseCodegenNativeComponent","split","majorStr","minorStr","major","Number","parseInt","minor","isRemoteDebuggingEnabled","nativeCallSyncHook","__REMOTEDEV__"],"sources":["utils.ts"],"sourcesContent":["import pack from 'react-native/package.json';\n\nconst rnVersion = pack.version;\n\nexport function toArray<T>(object: T | T[]): T[] {\n  if (!Array.isArray(object)) {\n    return [object];\n  }\n\n  return object;\n}\n\nexport type withPrevAndCurrentMapFn<T, Transformed> = (\n  previous: Transformed | null,\n  current: T\n) => Transformed;\nexport function withPrevAndCurrent<T, Transformed>(\n  array: T[],\n  mapFn: withPrevAndCurrentMapFn<T, Transformed>\n): Transformed[] {\n  const previousArr: (null | Transformed)[] = [null];\n  const currentArr = [...array];\n  const transformedArr: Transformed[] = [];\n  currentArr.forEach((current, i) => {\n    const previous = previousArr[i];\n    const transformed = mapFn(previous, current);\n    previousArr.push(transformed);\n    transformedArr.push(transformed);\n  });\n  return transformedArr;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function hasProperty(object: object, key: string) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nexport function isJestEnv(): boolean {\n  // @ts-ignore Do not use `@types/node` because it will prioritise Node types over RN types which breaks the types (ex. setTimeout) in React Native projects.\n  return hasProperty(global, 'process') && !!process.env.JEST_WORKER_ID;\n}\n\nexport function tagMessage(msg: string) {\n  return `[react-native-gesture-handler] ${msg}`;\n}\n\n// helper method to check whether Fabric is enabled, however global.nativeFabricUIManager\n// may not be initialized before the first render\nexport function isFabric(): boolean {\n  // @ts-expect-error nativeFabricUIManager is not yet included in the RN types\n  return !!global?.nativeFabricUIManager;\n}\n\nexport function shouldUseCodegenNativeComponent(): boolean {\n  const [majorStr, minorStr] = rnVersion.split('.');\n  const major = Number.parseInt(majorStr);\n  const minor = Number.parseInt(minorStr);\n\n  // use codegenNativeComponent starting with RN 0.68\n  return minor >= 68 || major > 0;\n}\n\nexport function isRemoteDebuggingEnabled(): boolean {\n  // react-native-reanimated checks if in remote debugging in the same way\n  // @ts-ignore global is available but node types are not included\n  return !(global as any).nativeCallSyncHook || (global as any).__REMOTEDEV__;\n}\n"]},"metadata":{},"sourceType":"script"}