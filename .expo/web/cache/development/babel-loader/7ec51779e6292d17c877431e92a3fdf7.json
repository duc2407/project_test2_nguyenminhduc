{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _State = require(\"../../State\");\nvar _interfaces = require(\"../interfaces\");\nvar _PointerTracker = _interopRequireDefault(require(\"./PointerTracker\"));\nvar _utils = require(\"../utils\");\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar GestureHandlerOrchestrator = function () {\n  function GestureHandlerOrchestrator() {\n    (0, _classCallCheck2.default)(this, GestureHandlerOrchestrator);\n    _defineProperty(this, \"gestureHandlers\", []);\n    _defineProperty(this, \"awaitingHandlers\", []);\n    _defineProperty(this, \"handlersToCancel\", []);\n    _defineProperty(this, \"handlingChangeSemaphore\", 0);\n    _defineProperty(this, \"activationIndex\", 0);\n  }\n  (0, _createClass2.default)(GestureHandlerOrchestrator, [{\n    key: \"scheduleFinishedHandlersCleanup\",\n    value: function scheduleFinishedHandlersCleanup() {\n      if (this.handlingChangeSemaphore === 0) {\n        this.cleanupFinishedHandlers();\n      }\n    }\n  }, {\n    key: \"cleanHandler\",\n    value: function cleanHandler(handler) {\n      handler.reset();\n      handler.setActive(false);\n      handler.setAwaiting(false);\n      handler.setActivationIndex(Number.MAX_VALUE);\n    }\n  }, {\n    key: \"removeHandlerFromOrchestrator\",\n    value: function removeHandlerFromOrchestrator(handler) {\n      this.gestureHandlers.splice(this.gestureHandlers.indexOf(handler), 1);\n      this.awaitingHandlers.splice(this.awaitingHandlers.indexOf(handler), 1);\n      this.handlersToCancel.splice(this.handlersToCancel.indexOf(handler), 1);\n    }\n  }, {\n    key: \"cleanupFinishedHandlers\",\n    value: function cleanupFinishedHandlers() {\n      for (var i = this.gestureHandlers.length - 1; i >= 0; --i) {\n        var handler = this.gestureHandlers[i];\n        if (!handler) {\n          continue;\n        }\n        if (this.isFinished(handler.getState()) && !handler.isAwaiting()) {\n          this.gestureHandlers.splice(i, 1);\n          this.cleanHandler(handler);\n        }\n      }\n    }\n  }, {\n    key: \"hasOtherHandlerToWaitFor\",\n    value: function hasOtherHandlerToWaitFor(handler) {\n      var _this = this;\n      var hasToWait = false;\n      this.gestureHandlers.forEach(function (otherHandler) {\n        if (otherHandler && !_this.isFinished(otherHandler.getState()) && _this.shouldHandlerWaitForOther(handler, otherHandler)) {\n          hasToWait = true;\n          return;\n        }\n      });\n      return hasToWait;\n    }\n  }, {\n    key: \"tryActivate\",\n    value: function tryActivate(handler) {\n      if (this.hasOtherHandlerToWaitFor(handler)) {\n        this.addAwaitingHandler(handler);\n      } else if (handler.getState() !== _State.State.CANCELLED && handler.getState() !== _State.State.FAILED) {\n        if (this.shouldActivate(handler)) {\n          this.makeActive(handler);\n        } else {\n          switch (handler.getState()) {\n            case _State.State.ACTIVE:\n              handler.fail();\n              break;\n            case _State.State.BEGAN:\n              handler.cancel();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"shouldActivate\",\n    value: function shouldActivate(handler) {\n      for (var _iterator = _createForOfIteratorHelperLoose(this.gestureHandlers), _step; !(_step = _iterator()).done;) {\n        var otherHandler = _step.value;\n        if (this.shouldHandlerBeCancelledBy(handler, otherHandler)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"cleanupAwaitingHandlers\",\n    value: function cleanupAwaitingHandlers(handler) {\n      for (var i = 0; i < this.awaitingHandlers.length; ++i) {\n        if (!this.awaitingHandlers[i].isAwaiting() && this.shouldHandlerWaitForOther(this.awaitingHandlers[i], handler)) {\n          this.cleanHandler(this.awaitingHandlers[i]);\n          this.awaitingHandlers.splice(i, 1);\n        }\n      }\n    }\n  }, {\n    key: \"onHandlerStateChange\",\n    value: function onHandlerStateChange(handler, newState, oldState, sendIfDisabled) {\n      var _this2 = this;\n      if (!handler.isEnabled() && !sendIfDisabled) {\n        return;\n      }\n      this.handlingChangeSemaphore += 1;\n      if (this.isFinished(newState)) {\n        this.awaitingHandlers.forEach(function (otherHandler) {\n          if (_this2.shouldHandlerWaitForOther(otherHandler, handler)) {\n            if (newState === _State.State.END) {\n              otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.cancel();\n              if (otherHandler.getState() === _State.State.END) {\n                otherHandler.sendEvent(_State.State.CANCELLED, _State.State.BEGAN);\n              }\n              otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.setAwaiting(false);\n            } else {\n              _this2.tryActivate(otherHandler);\n            }\n          }\n        });\n      }\n      if (newState === _State.State.ACTIVE) {\n        this.tryActivate(handler);\n      } else if (oldState === _State.State.ACTIVE || oldState === _State.State.END) {\n        if (handler.isActive()) {\n          handler.sendEvent(newState, oldState);\n        } else if (oldState === _State.State.ACTIVE && (newState === _State.State.CANCELLED || newState === _State.State.FAILED)) {\n          handler.sendEvent(newState, _State.State.BEGAN);\n        }\n      } else if (oldState !== _State.State.UNDETERMINED || newState !== _State.State.CANCELLED) {\n        handler.sendEvent(newState, oldState);\n      }\n      this.handlingChangeSemaphore -= 1;\n      this.scheduleFinishedHandlersCleanup();\n      if (this.awaitingHandlers.indexOf(handler) < 0) {\n        this.cleanupAwaitingHandlers(handler);\n      }\n    }\n  }, {\n    key: \"makeActive\",\n    value: function makeActive(handler) {\n      var _this3 = this;\n      var currentState = handler.getState();\n      handler.setActive(true);\n      handler.setShouldResetProgress(true);\n      handler.setActivationIndex(this.activationIndex++);\n      this.gestureHandlers.forEach(function (otherHandler) {\n        if (_this3.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n          _this3.handlersToCancel.push(otherHandler);\n        }\n      });\n      for (var i = this.handlersToCancel.length - 1; i >= 0; --i) {\n        var _this$handlersToCance;\n        (_this$handlersToCance = this.handlersToCancel[i]) === null || _this$handlersToCance === void 0 ? void 0 : _this$handlersToCance.cancel();\n      }\n      this.awaitingHandlers.forEach(function (otherHandler) {\n        if (_this3.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n          otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.cancel();\n          otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.setAwaiting(true);\n        }\n      });\n      handler.sendEvent(_State.State.ACTIVE, _State.State.BEGAN);\n      if (currentState !== _State.State.ACTIVE) {\n        handler.sendEvent(_State.State.END, _State.State.ACTIVE);\n        if (currentState !== _State.State.END) {\n          handler.sendEvent(_State.State.UNDETERMINED, _State.State.END);\n        }\n      }\n      if (handler.isAwaiting()) {\n        handler.setAwaiting(false);\n        for (var _i = 0; _i < this.awaitingHandlers.length; ++_i) {\n          if (this.awaitingHandlers[_i] === handler) {\n            this.awaitingHandlers.splice(_i, 1);\n          }\n        }\n      }\n      this.handlersToCancel = [];\n    }\n  }, {\n    key: \"addAwaitingHandler\",\n    value: function addAwaitingHandler(handler) {\n      var alreadyExists = false;\n      this.awaitingHandlers.forEach(function (otherHandler) {\n        if (otherHandler === handler) {\n          alreadyExists = true;\n          return;\n        }\n      });\n      if (alreadyExists) {\n        return;\n      }\n      this.awaitingHandlers.push(handler);\n      handler.setAwaiting(true);\n      handler.setActivationIndex(this.activationIndex++);\n    }\n  }, {\n    key: \"recordHandlerIfNotPresent\",\n    value: function recordHandlerIfNotPresent(handler) {\n      var alreadyExists = false;\n      this.gestureHandlers.forEach(function (otherHandler) {\n        if (otherHandler === handler) {\n          alreadyExists = true;\n          return;\n        }\n      });\n      if (alreadyExists) {\n        return;\n      }\n      this.gestureHandlers.push(handler);\n      handler.setActive(false);\n      handler.setAwaiting(false);\n      handler.setActivationIndex(Number.MAX_SAFE_INTEGER);\n    }\n  }, {\n    key: \"shouldHandlerWaitForOther\",\n    value: function shouldHandlerWaitForOther(handler, otherHandler) {\n      return handler !== otherHandler && (handler.shouldWaitForHandlerFailure(otherHandler) || otherHandler.shouldRequireToWaitForFailure(handler));\n    }\n  }, {\n    key: \"canRunSimultaneously\",\n    value: function canRunSimultaneously(gh1, gh2) {\n      return gh1 === gh2 || gh1.shouldRecognizeSimultaneously(gh2) || gh2.shouldRecognizeSimultaneously(gh1);\n    }\n  }, {\n    key: \"shouldHandlerBeCancelledBy\",\n    value: function shouldHandlerBeCancelledBy(handler, otherHandler) {\n      if (this.canRunSimultaneously(handler, otherHandler)) {\n        return false;\n      }\n      if (handler !== otherHandler && (handler.isAwaiting() || handler.getState() === _State.State.ACTIVE)) {\n        return handler.shouldBeCancelledByOther(otherHandler);\n      }\n      var handlerPointers = handler.getTrackedPointersID();\n      var otherPointers = otherHandler.getTrackedPointersID();\n      if (!_PointerTracker.default.shareCommonPointers(handlerPointers, otherPointers) && handler.getView() !== otherHandler.getView()) {\n        return this.checkOverlap(handler, otherHandler);\n      }\n      return true;\n    }\n  }, {\n    key: \"checkOverlap\",\n    value: function checkOverlap(handler, otherHandler) {\n      var handlerPointers = handler.getTrackedPointersID();\n      var otherPointers = otherHandler.getTrackedPointersID();\n      var overlap = false;\n      handlerPointers.forEach(function (pointer) {\n        var handlerX = handler.getTracker().getLastX(pointer);\n        var handlerY = handler.getTracker().getLastY(pointer);\n        if ((0, _utils.isPointerInBounds)(handler.getView(), {\n          x: handlerX,\n          y: handlerY\n        }) && (0, _utils.isPointerInBounds)(otherHandler.getView(), {\n          x: handlerX,\n          y: handlerY\n        })) {\n          overlap = true;\n        }\n      });\n      otherPointers.forEach(function (pointer) {\n        var otherX = otherHandler.getTracker().getLastX(pointer);\n        var otherY = otherHandler.getTracker().getLastY(pointer);\n        if ((0, _utils.isPointerInBounds)(handler.getView(), {\n          x: otherX,\n          y: otherY\n        }) && (0, _utils.isPointerInBounds)(otherHandler.getView(), {\n          x: otherX,\n          y: otherY\n        })) {\n          overlap = true;\n        }\n      });\n      return overlap;\n    }\n  }, {\n    key: \"isFinished\",\n    value: function isFinished(state) {\n      return state === _State.State.END || state === _State.State.FAILED || state === _State.State.CANCELLED;\n    }\n  }, {\n    key: \"cancelMouseAndPenGestures\",\n    value:\n\n    function cancelMouseAndPenGestures(currentHandler) {\n      this.gestureHandlers.forEach(function (handler) {\n        if (handler.getPointerType() !== _interfaces.PointerType.MOUSE && handler.getPointerType() !== _interfaces.PointerType.PEN) {\n          return;\n        }\n        if (handler !== currentHandler) {\n          handler.cancel();\n        } else {\n          handler.getTracker().resetTracker();\n        }\n      });\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!GestureHandlerOrchestrator.instance) {\n        GestureHandlerOrchestrator.instance = new GestureHandlerOrchestrator();\n      }\n      return GestureHandlerOrchestrator.instance;\n    }\n  }]);\n  return GestureHandlerOrchestrator;\n}();\nexports.default = GestureHandlerOrchestrator;\n_defineProperty(GestureHandlerOrchestrator, \"instance\", void 0);","map":{"version":3,"sources":["GestureHandlerOrchestrator.ts"],"names":["GestureHandlerOrchestrator","constructor","scheduleFinishedHandlersCleanup","handlingChangeSemaphore","cleanupFinishedHandlers","cleanHandler","handler","reset","setActive","setAwaiting","setActivationIndex","Number","MAX_VALUE","removeHandlerFromOrchestrator","gestureHandlers","splice","indexOf","awaitingHandlers","handlersToCancel","i","length","isFinished","getState","isAwaiting","hasOtherHandlerToWaitFor","hasToWait","forEach","otherHandler","shouldHandlerWaitForOther","tryActivate","addAwaitingHandler","State","CANCELLED","FAILED","shouldActivate","makeActive","ACTIVE","fail","BEGAN","cancel","shouldHandlerBeCancelledBy","cleanupAwaitingHandlers","onHandlerStateChange","newState","oldState","sendIfDisabled","isEnabled","END","sendEvent","isActive","UNDETERMINED","currentState","setShouldResetProgress","activationIndex","push","alreadyExists","recordHandlerIfNotPresent","MAX_SAFE_INTEGER","shouldWaitForHandlerFailure","shouldRequireToWaitForFailure","canRunSimultaneously","gh1","gh2","shouldRecognizeSimultaneously","shouldBeCancelledByOther","handlerPointers","getTrackedPointersID","otherPointers","PointerTracker","shareCommonPointers","getView","checkOverlap","overlap","pointer","handlerX","getTracker","getLastX","handlerY","getLastY","x","y","isPointerInBounds","otherX","otherY","state","cancelMouseAndPenGestures","currentHandler","getPointerType","PointerType","MOUSE","PEN","resetTracker","getInstance","instance"],"mappings":"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","sourcesContent":["import { State } from '../../State';\nimport { PointerType } from '../interfaces';\n\nimport GestureHandler from '../handlers/GestureHandler';\nimport PointerTracker from './PointerTracker';\nimport { isPointerInBounds } from '../utils';\n\nexport default class GestureHandlerOrchestrator {\n  private static instance: GestureHandlerOrchestrator;\n\n  private gestureHandlers: GestureHandler[] = [];\n  private awaitingHandlers: GestureHandler[] = [];\n  private handlersToCancel: GestureHandler[] = [];\n\n  private handlingChangeSemaphore = 0;\n  private activationIndex = 0;\n\n  // Private beacuse of Singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  private scheduleFinishedHandlersCleanup(): void {\n    if (this.handlingChangeSemaphore === 0) {\n      this.cleanupFinishedHandlers();\n    }\n  }\n\n  private cleanHandler(handler: GestureHandler): void {\n    handler.reset();\n    handler.setActive(false);\n    handler.setAwaiting(false);\n    handler.setActivationIndex(Number.MAX_VALUE);\n  }\n\n  public removeHandlerFromOrchestrator(handler: GestureHandler): void {\n    this.gestureHandlers.splice(this.gestureHandlers.indexOf(handler), 1);\n    this.awaitingHandlers.splice(this.awaitingHandlers.indexOf(handler), 1);\n    this.handlersToCancel.splice(this.handlersToCancel.indexOf(handler), 1);\n  }\n\n  private cleanupFinishedHandlers(): void {\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      const handler = this.gestureHandlers[i];\n\n      if (!handler) {\n        continue;\n      }\n      if (this.isFinished(handler.getState()) && !handler.isAwaiting()) {\n        this.gestureHandlers.splice(i, 1);\n\n        this.cleanHandler(handler);\n      }\n    }\n  }\n\n  private hasOtherHandlerToWaitFor(handler: GestureHandler): boolean {\n    let hasToWait = false;\n    this.gestureHandlers.forEach((otherHandler) => {\n      if (\n        otherHandler &&\n        !this.isFinished(otherHandler.getState()) &&\n        this.shouldHandlerWaitForOther(handler, otherHandler)\n      ) {\n        hasToWait = true;\n        return;\n      }\n    });\n\n    return hasToWait;\n  }\n\n  private tryActivate(handler: GestureHandler): void {\n    if (this.hasOtherHandlerToWaitFor(handler)) {\n      this.addAwaitingHandler(handler);\n    } else if (\n      handler.getState() !== State.CANCELLED &&\n      handler.getState() !== State.FAILED\n    ) {\n      if (this.shouldActivate(handler)) {\n        this.makeActive(handler);\n      } else {\n        switch (handler.getState()) {\n          case State.ACTIVE:\n            handler.fail();\n            break;\n          case State.BEGAN:\n            handler.cancel();\n        }\n      }\n    }\n  }\n\n  private shouldActivate(handler: GestureHandler): boolean {\n    for (const otherHandler of this.gestureHandlers) {\n      if (this.shouldHandlerBeCancelledBy(handler, otherHandler)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private cleanupAwaitingHandlers(handler: GestureHandler): void {\n    for (let i = 0; i < this.awaitingHandlers.length; ++i) {\n      if (\n        !this.awaitingHandlers[i].isAwaiting() &&\n        this.shouldHandlerWaitForOther(this.awaitingHandlers[i], handler)\n      ) {\n        this.cleanHandler(this.awaitingHandlers[i]);\n        this.awaitingHandlers.splice(i, 1);\n      }\n    }\n  }\n\n  public onHandlerStateChange(\n    handler: GestureHandler,\n    newState: State,\n    oldState: State,\n    sendIfDisabled?: boolean\n  ): void {\n    if (!handler.isEnabled() && !sendIfDisabled) {\n      return;\n    }\n\n    this.handlingChangeSemaphore += 1;\n\n    if (this.isFinished(newState)) {\n      this.awaitingHandlers.forEach((otherHandler) => {\n        if (this.shouldHandlerWaitForOther(otherHandler, handler)) {\n          if (newState === State.END) {\n            otherHandler?.cancel();\n            if (otherHandler.getState() === State.END) {\n              // Handle edge case, where discrete gestures end immediately after activation thus\n              // their state is set to END and when the gesture they are waiting for activates they\n              // should be cancelled, however `cancel` was never sent as gestures were already in the END state.\n              // Send synthetic BEGAN -> CANCELLED to properly handle JS logic\n              otherHandler.sendEvent(State.CANCELLED, State.BEGAN);\n            }\n            otherHandler?.setAwaiting(false);\n          } else {\n            this.tryActivate(otherHandler);\n          }\n        }\n      });\n    }\n\n    if (newState === State.ACTIVE) {\n      this.tryActivate(handler);\n    } else if (oldState === State.ACTIVE || oldState === State.END) {\n      if (handler.isActive()) {\n        handler.sendEvent(newState, oldState);\n      } else if (\n        oldState === State.ACTIVE &&\n        (newState === State.CANCELLED || newState === State.FAILED)\n      ) {\n        handler.sendEvent(newState, State.BEGAN);\n      }\n    } else if (\n      oldState !== State.UNDETERMINED ||\n      newState !== State.CANCELLED\n    ) {\n      handler.sendEvent(newState, oldState);\n    }\n\n    this.handlingChangeSemaphore -= 1;\n\n    this.scheduleFinishedHandlersCleanup();\n\n    if (this.awaitingHandlers.indexOf(handler) < 0) {\n      this.cleanupAwaitingHandlers(handler);\n    }\n  }\n\n  private makeActive(handler: GestureHandler): void {\n    const currentState = handler.getState();\n\n    handler.setActive(true);\n    handler.setShouldResetProgress(true);\n    handler.setActivationIndex(this.activationIndex++);\n\n    this.gestureHandlers.forEach((otherHandler) => {\n      // Order of arguments is correct - we check whether current handler should cancel existing handlers\n\n      if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n        this.handlersToCancel.push(otherHandler);\n      }\n    });\n\n    for (let i = this.handlersToCancel.length - 1; i >= 0; --i) {\n      this.handlersToCancel[i]?.cancel();\n    }\n    this.awaitingHandlers.forEach((otherHandler) => {\n      if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n        otherHandler?.cancel();\n        otherHandler?.setAwaiting(true);\n      }\n    });\n\n    handler.sendEvent(State.ACTIVE, State.BEGAN);\n\n    if (currentState !== State.ACTIVE) {\n      handler.sendEvent(State.END, State.ACTIVE);\n      if (currentState !== State.END) {\n        handler.sendEvent(State.UNDETERMINED, State.END);\n      }\n    }\n\n    if (handler.isAwaiting()) {\n      handler.setAwaiting(false);\n      for (let i = 0; i < this.awaitingHandlers.length; ++i) {\n        if (this.awaitingHandlers[i] === handler) {\n          this.awaitingHandlers.splice(i, 1);\n        }\n      }\n    }\n\n    this.handlersToCancel = [];\n  }\n\n  private addAwaitingHandler(handler: GestureHandler): void {\n    let alreadyExists = false;\n\n    this.awaitingHandlers.forEach((otherHandler) => {\n      if (otherHandler === handler) {\n        alreadyExists = true;\n        return;\n      }\n    });\n\n    if (alreadyExists) {\n      return;\n    }\n\n    this.awaitingHandlers.push(handler);\n\n    handler.setAwaiting(true);\n    handler.setActivationIndex(this.activationIndex++);\n  }\n\n  public recordHandlerIfNotPresent(handler: GestureHandler): void {\n    let alreadyExists = false;\n\n    this.gestureHandlers.forEach((otherHandler) => {\n      if (otherHandler === handler) {\n        alreadyExists = true;\n        return;\n      }\n    });\n\n    if (alreadyExists) {\n      return;\n    }\n\n    this.gestureHandlers.push(handler);\n\n    handler.setActive(false);\n    handler.setAwaiting(false);\n    handler.setActivationIndex(Number.MAX_SAFE_INTEGER);\n  }\n\n  private shouldHandlerWaitForOther(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    return (\n      handler !== otherHandler &&\n      (handler.shouldWaitForHandlerFailure(otherHandler) ||\n        otherHandler.shouldRequireToWaitForFailure(handler))\n    );\n  }\n\n  private canRunSimultaneously(\n    gh1: GestureHandler,\n    gh2: GestureHandler\n  ): boolean {\n    return (\n      gh1 === gh2 ||\n      gh1.shouldRecognizeSimultaneously(gh2) ||\n      gh2.shouldRecognizeSimultaneously(gh1)\n    );\n  }\n\n  private shouldHandlerBeCancelledBy(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    if (this.canRunSimultaneously(handler, otherHandler)) {\n      return false;\n    }\n\n    if (\n      handler !== otherHandler &&\n      (handler.isAwaiting() || handler.getState() === State.ACTIVE)\n    ) {\n      // For now it always returns false\n      return handler.shouldBeCancelledByOther(otherHandler);\n    }\n\n    const handlerPointers: number[] = handler.getTrackedPointersID();\n    const otherPointers: number[] = otherHandler.getTrackedPointersID();\n\n    if (\n      !PointerTracker.shareCommonPointers(handlerPointers, otherPointers) &&\n      handler.getView() !== otherHandler.getView()\n    ) {\n      return this.checkOverlap(handler, otherHandler);\n    }\n\n    return true;\n  }\n\n  private checkOverlap(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    // If handlers don't have common pointers, default return value is false.\n    // However, if at least on pointer overlaps with both handlers, we return true\n    // This solves issue in overlapping parents example\n\n    // TODO: Find better way to handle that issue, for example by activation order and handler cancelling\n\n    const handlerPointers: number[] = handler.getTrackedPointersID();\n    const otherPointers: number[] = otherHandler.getTrackedPointersID();\n\n    let overlap = false;\n\n    handlerPointers.forEach((pointer: number) => {\n      const handlerX: number = handler.getTracker().getLastX(pointer);\n      const handlerY: number = handler.getTracker().getLastY(pointer);\n\n      if (\n        isPointerInBounds(handler.getView(), { x: handlerX, y: handlerY }) &&\n        isPointerInBounds(otherHandler.getView(), { x: handlerX, y: handlerY })\n      ) {\n        overlap = true;\n      }\n    });\n\n    otherPointers.forEach((pointer: number) => {\n      const otherX: number = otherHandler.getTracker().getLastX(pointer);\n      const otherY: number = otherHandler.getTracker().getLastY(pointer);\n\n      if (\n        isPointerInBounds(handler.getView(), { x: otherX, y: otherY }) &&\n        isPointerInBounds(otherHandler.getView(), { x: otherX, y: otherY })\n      ) {\n        overlap = true;\n      }\n    });\n\n    return overlap;\n  }\n\n  private isFinished(state: State): boolean {\n    return (\n      state === State.END || state === State.FAILED || state === State.CANCELLED\n    );\n  }\n\n  // This function is called when handler receives touchdown event\n  // If handler is using mouse or pen as a pointer and any handler receives touch event,\n  // mouse/pen event dissappears - it doesn't send onPointerCancel nor onPointerUp (and others)\n  // This became a problem because handler was left at active state without any signal to end or fail\n  // To handle this, when new touch event is received, we loop through active handlers and check which type of\n  // pointer they're using. If there are any handler with mouse/pen as a pointer, we cancel them\n  public cancelMouseAndPenGestures(currentHandler: GestureHandler): void {\n    this.gestureHandlers.forEach((handler: GestureHandler) => {\n      if (\n        handler.getPointerType() !== PointerType.MOUSE &&\n        handler.getPointerType() !== PointerType.PEN\n      ) {\n        return;\n      }\n\n      if (handler !== currentHandler) {\n        handler.cancel();\n      } else {\n        // Handler that received touch event should have its pointer tracker reset\n        // This allows handler to smoothly change from mouse/pen to touch\n        // The drawback is, that when we try to use mouse/pen one more time, it doesn't send onPointerDown at the first time\n        // so it is required to click two times to get handler to work\n        //\n        // However, handler will receive manually created onPointerEnter that is triggered in EventManager in onPointerMove method.\n        // There may be possibility to use that fact to make handler respond properly to first mouse click\n        handler.getTracker().resetTracker();\n      }\n    });\n  }\n\n  public static getInstance(): GestureHandlerOrchestrator {\n    if (!GestureHandlerOrchestrator.instance) {\n      GestureHandlerOrchestrator.instance = new GestureHandlerOrchestrator();\n    }\n\n    return GestureHandlerOrchestrator.instance;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}