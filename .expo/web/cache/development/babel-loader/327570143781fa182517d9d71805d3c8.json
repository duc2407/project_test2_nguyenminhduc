{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _State = require(\"../../State\");\nvar _interfaces = require(\"../interfaces\");\nvar _GestureHandler2 = _interopRequireDefault(require(\"./GestureHandler\"));\nvar _excluded = [\"enabled\"];\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar DEFAULT_MAX_DURATION_MS = 500;\nvar DEFAULT_MAX_DELAY_MS = 500;\nvar DEFAULT_NUMBER_OF_TAPS = 1;\nvar DEFAULT_MIN_NUMBER_OF_POINTERS = 1;\nvar TapGestureHandler = function (_GestureHandler) {\n  (0, _inherits2.default)(TapGestureHandler, _GestureHandler);\n  var _super = _createSuper(TapGestureHandler);\n  function TapGestureHandler() {\n    var _this;\n    (0, _classCallCheck2.default)(this, TapGestureHandler);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"maxDeltaX\", Number.MIN_SAFE_INTEGER);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"maxDeltaY\", Number.MIN_SAFE_INTEGER);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"maxDistSq\", Number.MIN_SAFE_INTEGER);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"maxDurationMs\", DEFAULT_MAX_DURATION_MS);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"maxDelayMs\", DEFAULT_MAX_DELAY_MS);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"numberOfTaps\", DEFAULT_NUMBER_OF_TAPS);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"minNumberOfPointers\", DEFAULT_MIN_NUMBER_OF_POINTERS);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"currentMaxNumberOfPointers\", 1);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"startX\", 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"startY\", 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"offsetX\", 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"offsetY\", 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"lastX\", 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"lastY\", 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"waitTimeout\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"delayTimeout\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"tapsSoFar\", 0);\n    return _this;\n  }\n  (0, _createClass2.default)(TapGestureHandler, [{\n    key: \"init\",\n    value: function init(ref, propsRef) {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"init\", this).call(this, ref, propsRef);\n      this.setShouldCancelWhenOutside(true);\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$enabled = _ref.enabled,\n        enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"updateGestureConfig\", this).call(this, (0, _extends2.default)({\n        enabled: enabled\n      }, props));\n      this.enabled = enabled;\n      if (this.config.numberOfTaps !== undefined) {\n        this.numberOfTaps = this.config.numberOfTaps;\n      }\n      if (this.config.maxDurationMs !== undefined) {\n        this.maxDurationMs = this.config.maxDurationMs;\n      }\n      if (this.config.maxDelayMs !== undefined) {\n        this.maxDelayMs = this.config.maxDelayMs;\n      }\n      if (this.config.maxDeltaX !== undefined) {\n        this.maxDeltaX = this.config.maxDeltaX;\n      }\n      if (this.config.maxDeltaY !== undefined) {\n        this.maxDeltaY = this.config.maxDeltaY;\n      }\n      if (this.config.maxDist !== undefined) {\n        this.maxDistSq = this.config.maxDist * this.config.maxDist;\n      }\n      if (this.config.minPointers !== undefined) {\n        this.minNumberOfPointers = this.config.minPointers;\n      }\n    }\n  }, {\n    key: \"resetConfig\",\n    value: function resetConfig() {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"resetConfig\", this).call(this);\n      this.maxDeltaX = Number.MIN_SAFE_INTEGER;\n      this.maxDeltaY = Number.MIN_SAFE_INTEGER;\n      this.maxDistSq = Number.MIN_SAFE_INTEGER;\n      this.maxDurationMs = DEFAULT_MAX_DURATION_MS;\n      this.maxDelayMs = DEFAULT_MAX_DELAY_MS;\n      this.numberOfTaps = DEFAULT_NUMBER_OF_TAPS;\n      this.minNumberOfPointers = DEFAULT_MIN_NUMBER_OF_POINTERS;\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent() {\n      var rect = this.view.getBoundingClientRect();\n      return {\n        x: this.tracker.getLastAvgX() - rect.left,\n        y: this.tracker.getLastAvgY() - rect.top,\n        absoluteX: this.tracker.getLastAvgX(),\n        absoluteY: this.tracker.getLastAvgY()\n      };\n    }\n  }, {\n    key: \"clearTimeouts\",\n    value: function clearTimeouts() {\n      clearTimeout(this.waitTimeout);\n      clearTimeout(this.delayTimeout);\n    }\n  }, {\n    key: \"startTap\",\n    value: function startTap() {\n      var _this2 = this;\n      this.clearTimeouts();\n      this.waitTimeout = setTimeout(function () {\n        return _this2.fail();\n      }, this.maxDurationMs);\n    }\n  }, {\n    key: \"endTap\",\n    value: function endTap() {\n      var _this3 = this;\n      this.clearTimeouts();\n      if (++this.tapsSoFar === this.numberOfTaps && this.currentMaxNumberOfPointers >= this.minNumberOfPointers) {\n        this.activate();\n      } else {\n        this.delayTimeout = setTimeout(function () {\n          return _this3.fail();\n        }, this.maxDelayMs);\n      }\n    }\n  }, {\n    key: \"onPointerDown\",\n    value:\n\n    function onPointerDown(event) {\n      this.tracker.addToTracker(event);\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onPointerDown\", this).call(this, event);\n      this.trySettingPosition(event);\n      this.startX = event.x;\n      this.startY = event.y;\n      this.lastX = event.x;\n      this.lastY = event.y;\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerAdd\",\n    value: function onPointerAdd(event) {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onPointerAdd\", this).call(this, event);\n      this.tracker.addToTracker(event);\n      this.trySettingPosition(event);\n      this.offsetX += this.lastX - this.startX;\n      this.offsetY += this.lastY - this.startY;\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.startX = this.tracker.getLastAvgX();\n      this.startY = this.tracker.getLastAvgY();\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(event) {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onPointerUp\", this).call(this, event);\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.tracker.removeFromTracker(event.pointerId);\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerRemove\",\n    value: function onPointerRemove(event) {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onPointerRemove\", this).call(this, event);\n      this.tracker.removeFromTracker(event.pointerId);\n      this.offsetX += this.lastX - this.startX;\n      this.offsetY += this.lastY = this.startY;\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.startX = this.lastX;\n      this.startY = this.lastY;\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(event) {\n      this.trySettingPosition(event);\n      this.tracker.track(event);\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.updateState(event);\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onPointerMove\", this).call(this, event);\n    }\n  }, {\n    key: \"onPointerOutOfBounds\",\n    value: function onPointerOutOfBounds(event) {\n      this.trySettingPosition(event);\n      this.tracker.track(event);\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.updateState(event);\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onPointerOutOfBounds\", this).call(this, event);\n    }\n  }, {\n    key: \"onPointerCancel\",\n    value: function onPointerCancel(event) {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onPointerCancel\", this).call(this, event);\n      this.tracker.resetTracker();\n      this.fail();\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(event) {\n      if (this.currentMaxNumberOfPointers < this.tracker.getTrackedPointersCount()) {\n        this.currentMaxNumberOfPointers = this.tracker.getTrackedPointersCount();\n      }\n      if (this.shouldFail()) {\n        this.fail();\n        return;\n      }\n      switch (this.currentState) {\n        case _State.State.UNDETERMINED:\n          if (event.eventType === _interfaces.EventTypes.DOWN) {\n            this.begin();\n          }\n          this.startTap();\n          break;\n        case _State.State.BEGAN:\n          if (event.eventType === _interfaces.EventTypes.UP) {\n            this.endTap();\n          }\n          if (event.eventType === _interfaces.EventTypes.DOWN) {\n            this.startTap();\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"trySettingPosition\",\n    value: function trySettingPosition(event) {\n      if (this.currentState !== _State.State.UNDETERMINED) {\n        return;\n      }\n      this.offsetX = 0;\n      this.offsetY = 0;\n      this.startX = event.x;\n      this.startY = event.y;\n    }\n  }, {\n    key: \"shouldFail\",\n    value: function shouldFail() {\n      var dx = this.lastX - this.startX + this.offsetX;\n      if (this.maxDeltaX !== Number.MIN_SAFE_INTEGER && Math.abs(dx) > this.maxDeltaX) {\n        return true;\n      }\n      var dy = this.lastY - this.startY + this.offsetY;\n      if (this.maxDeltaY !== Number.MIN_SAFE_INTEGER && Math.abs(dy) > this.maxDeltaY) {\n        return true;\n      }\n      var distSq = dy * dy + dx * dx;\n      return this.maxDistSq !== Number.MIN_SAFE_INTEGER && distSq > this.maxDistSq;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"activate\", this).call(this);\n      this.end();\n    }\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {\n      this.resetProgress();\n      this.clearTimeouts();\n    }\n  }, {\n    key: \"resetProgress\",\n    value: function resetProgress() {\n      this.clearTimeouts();\n      this.tapsSoFar = 0;\n      this.currentMaxNumberOfPointers = 0;\n    }\n  }]);\n  return TapGestureHandler;\n}(_GestureHandler2.default);\nexports.default = TapGestureHandler;","map":{"version":3,"mappings":"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","names":["DEFAULT_MAX_DURATION_MS","DEFAULT_MAX_DELAY_MS","DEFAULT_NUMBER_OF_TAPS","DEFAULT_MIN_NUMBER_OF_POINTERS","TapGestureHandler","args","_defineProperty","Number","MIN_SAFE_INTEGER","init","ref","propsRef","setShouldCancelWhenOutside","updateGestureConfig","enabled","props","config","numberOfTaps","undefined","maxDurationMs","maxDelayMs","maxDeltaX","maxDeltaY","maxDist","maxDistSq","minPointers","minNumberOfPointers","resetConfig","transformNativeEvent","rect","view","getBoundingClientRect","x","tracker","getLastAvgX","left","y","getLastAvgY","top","absoluteX","absoluteY","clearTimeouts","clearTimeout","waitTimeout","delayTimeout","startTap","setTimeout","fail","endTap","tapsSoFar","currentMaxNumberOfPointers","activate","onPointerDown","event","addToTracker","trySettingPosition","startX","startY","lastX","lastY","updateState","onPointerAdd","offsetX","offsetY","onPointerUp","removeFromTracker","pointerId","onPointerRemove","onPointerMove","track","onPointerOutOfBounds","onPointerCancel","resetTracker","getTrackedPointersCount","shouldFail","currentState","State","UNDETERMINED","eventType","EventTypes","DOWN","begin","BEGAN","UP","dx","Math","abs","dy","distSq","end","onCancel","resetProgress","GestureHandler"],"sources":["TapGestureHandler.ts"],"sourcesContent":["import { State } from '../../State';\nimport { AdaptedEvent, Config, EventTypes } from '../interfaces';\n\nimport GestureHandler from './GestureHandler';\n\nconst DEFAULT_MAX_DURATION_MS = 500;\nconst DEFAULT_MAX_DELAY_MS = 500;\nconst DEFAULT_NUMBER_OF_TAPS = 1;\nconst DEFAULT_MIN_NUMBER_OF_POINTERS = 1;\n\nexport default class TapGestureHandler extends GestureHandler {\n  private maxDeltaX = Number.MIN_SAFE_INTEGER;\n  private maxDeltaY = Number.MIN_SAFE_INTEGER;\n  private maxDistSq = Number.MIN_SAFE_INTEGER;\n  private maxDurationMs = DEFAULT_MAX_DURATION_MS;\n  private maxDelayMs = DEFAULT_MAX_DELAY_MS;\n\n  private numberOfTaps = DEFAULT_NUMBER_OF_TAPS;\n  private minNumberOfPointers = DEFAULT_MIN_NUMBER_OF_POINTERS;\n  private currentMaxNumberOfPointers = 1;\n\n  private startX = 0;\n  private startY = 0;\n  private offsetX = 0;\n  private offsetY = 0;\n  private lastX = 0;\n  private lastY = 0;\n\n  private waitTimeout: number | undefined;\n  private delayTimeout: number | undefined;\n\n  private tapsSoFar = 0;\n\n  public init(ref: number, propsRef: React.RefObject<unknown>): void {\n    super.init(ref, propsRef);\n    this.setShouldCancelWhenOutside(true);\n  }\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    super.updateGestureConfig({ enabled: enabled, ...props });\n\n    this.enabled = enabled;\n\n    if (this.config.numberOfTaps !== undefined) {\n      this.numberOfTaps = this.config.numberOfTaps;\n    }\n\n    if (this.config.maxDurationMs !== undefined) {\n      this.maxDurationMs = this.config.maxDurationMs;\n    }\n\n    if (this.config.maxDelayMs !== undefined) {\n      this.maxDelayMs = this.config.maxDelayMs;\n    }\n\n    if (this.config.maxDeltaX !== undefined) {\n      this.maxDeltaX = this.config.maxDeltaX;\n    }\n\n    if (this.config.maxDeltaY !== undefined) {\n      this.maxDeltaY = this.config.maxDeltaY;\n    }\n\n    if (this.config.maxDist !== undefined) {\n      this.maxDistSq = this.config.maxDist * this.config.maxDist;\n    }\n\n    if (this.config.minPointers !== undefined) {\n      this.minNumberOfPointers = this.config.minPointers;\n    }\n  }\n\n  protected resetConfig(): void {\n    super.resetConfig();\n\n    this.maxDeltaX = Number.MIN_SAFE_INTEGER;\n    this.maxDeltaY = Number.MIN_SAFE_INTEGER;\n    this.maxDistSq = Number.MIN_SAFE_INTEGER;\n    this.maxDurationMs = DEFAULT_MAX_DURATION_MS;\n    this.maxDelayMs = DEFAULT_MAX_DELAY_MS;\n    this.numberOfTaps = DEFAULT_NUMBER_OF_TAPS;\n    this.minNumberOfPointers = DEFAULT_MIN_NUMBER_OF_POINTERS;\n  }\n\n  protected transformNativeEvent() {\n    const rect: DOMRect = this.view.getBoundingClientRect();\n\n    return {\n      x: this.tracker.getLastAvgX() - rect.left,\n      y: this.tracker.getLastAvgY() - rect.top,\n      absoluteX: this.tracker.getLastAvgX(),\n      absoluteY: this.tracker.getLastAvgY(),\n    };\n  }\n\n  private clearTimeouts(): void {\n    clearTimeout(this.waitTimeout);\n    clearTimeout(this.delayTimeout);\n  }\n\n  private startTap(): void {\n    this.clearTimeouts();\n\n    this.waitTimeout = setTimeout(() => this.fail(), this.maxDurationMs);\n  }\n\n  private endTap(): void {\n    this.clearTimeouts();\n\n    if (\n      ++this.tapsSoFar === this.numberOfTaps &&\n      this.currentMaxNumberOfPointers >= this.minNumberOfPointers\n    ) {\n      this.activate();\n    } else {\n      this.delayTimeout = setTimeout(() => this.fail(), this.maxDelayMs);\n    }\n  }\n\n  //Handling Events\n  protected onPointerDown(event: AdaptedEvent): void {\n    this.tracker.addToTracker(event);\n    super.onPointerDown(event);\n\n    this.trySettingPosition(event);\n\n    this.startX = event.x;\n    this.startY = event.y;\n\n    this.lastX = event.x;\n    this.lastY = event.y;\n\n    this.updateState(event);\n  }\n\n  protected onPointerAdd(event: AdaptedEvent): void {\n    super.onPointerAdd(event);\n    this.tracker.addToTracker(event);\n    this.trySettingPosition(event);\n\n    this.offsetX += this.lastX - this.startX;\n    this.offsetY += this.lastY - this.startY;\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.startX = this.tracker.getLastAvgX();\n    this.startY = this.tracker.getLastAvgY();\n\n    this.updateState(event);\n  }\n\n  protected onPointerUp(event: AdaptedEvent): void {\n    super.onPointerUp(event);\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.tracker.removeFromTracker(event.pointerId);\n\n    this.updateState(event);\n  }\n\n  protected onPointerRemove(event: AdaptedEvent): void {\n    super.onPointerRemove(event);\n    this.tracker.removeFromTracker(event.pointerId);\n\n    this.offsetX += this.lastX - this.startX;\n    this.offsetY += this.lastY = this.startY;\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.startX = this.lastX;\n    this.startY = this.lastY;\n\n    this.updateState(event);\n  }\n\n  protected onPointerMove(event: AdaptedEvent): void {\n    this.trySettingPosition(event);\n    this.tracker.track(event);\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.updateState(event);\n\n    super.onPointerMove(event);\n  }\n\n  protected onPointerOutOfBounds(event: AdaptedEvent): void {\n    this.trySettingPosition(event);\n    this.tracker.track(event);\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.updateState(event);\n\n    super.onPointerOutOfBounds(event);\n  }\n\n  protected onPointerCancel(event: AdaptedEvent): void {\n    super.onPointerCancel(event);\n    this.tracker.resetTracker();\n    this.fail();\n  }\n\n  private updateState(event: AdaptedEvent): void {\n    if (\n      this.currentMaxNumberOfPointers < this.tracker.getTrackedPointersCount()\n    ) {\n      this.currentMaxNumberOfPointers = this.tracker.getTrackedPointersCount();\n    }\n\n    if (this.shouldFail()) {\n      this.fail();\n      return;\n    }\n\n    switch (this.currentState) {\n      case State.UNDETERMINED:\n        if (event.eventType === EventTypes.DOWN) {\n          this.begin();\n        }\n        this.startTap();\n        break;\n      case State.BEGAN:\n        if (event.eventType === EventTypes.UP) {\n          this.endTap();\n        }\n        if (event.eventType === EventTypes.DOWN) {\n          this.startTap();\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  private trySettingPosition(event: AdaptedEvent): void {\n    if (this.currentState !== State.UNDETERMINED) {\n      return;\n    }\n\n    this.offsetX = 0;\n    this.offsetY = 0;\n    this.startX = event.x;\n    this.startY = event.y;\n  }\n\n  private shouldFail(): boolean {\n    const dx = this.lastX - this.startX + this.offsetX;\n\n    if (\n      this.maxDeltaX !== Number.MIN_SAFE_INTEGER &&\n      Math.abs(dx) > this.maxDeltaX\n    ) {\n      return true;\n    }\n\n    const dy = this.lastY - this.startY + this.offsetY;\n    if (\n      this.maxDeltaY !== Number.MIN_SAFE_INTEGER &&\n      Math.abs(dy) > this.maxDeltaY\n    ) {\n      return true;\n    }\n\n    const distSq = dy * dy + dx * dx;\n\n    return (\n      this.maxDistSq !== Number.MIN_SAFE_INTEGER && distSq > this.maxDistSq\n    );\n  }\n\n  public activate(): void {\n    super.activate();\n\n    this.end();\n  }\n\n  protected onCancel(): void {\n    this.resetProgress();\n    this.clearTimeouts();\n  }\n\n  protected resetProgress(): void {\n    this.clearTimeouts();\n    this.tapsSoFar = 0;\n    this.currentMaxNumberOfPointers = 0;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}