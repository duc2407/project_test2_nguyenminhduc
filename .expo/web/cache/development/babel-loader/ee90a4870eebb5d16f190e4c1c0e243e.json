{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _native = require(\"@react-navigation/native\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _warnOnce = _interopRequireDefault(require(\"warn-once\"));\nvar _StackView = _interopRequireDefault(require(\"../views/Stack/StackView\"));\nvar _excluded = [\"id\", \"initialRouteName\", \"children\", \"screenListeners\", \"screenOptions\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction StackNavigator(_ref) {\n  var id = _ref.id,\n    initialRouteName = _ref.initialRouteName,\n    children = _ref.children,\n    screenListeners = _ref.screenListeners,\n    screenOptions = _ref.screenOptions,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var mode = rest.mode;\n  (0, _warnOnce.default)(mode != null, \"Stack Navigator: 'mode=\\\"\" + mode + \"\\\"' is deprecated. Use 'presentation: \\\"\" + mode + \"\\\"' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator#presentation for more details.\");\n\n  var headerMode = rest.headerMode;\n  (0, _warnOnce.default)(headerMode === 'none', \"Stack Navigator: 'headerMode=\\\"none\\\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headershown for more details.\");\n  (0, _warnOnce.default)(headerMode != null && headerMode !== 'none', \"Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headermode for more details.\");\n\n  var keyboardHandlingEnabled = rest.keyboardHandlingEnabled;\n  (0, _warnOnce.default)(keyboardHandlingEnabled !== undefined, \"Stack Navigator: 'keyboardHandlingEnabled' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#keyboardhandlingenabled for more details.\");\n  var defaultScreenOptions = {\n    presentation: mode,\n    headerShown: headerMode ? headerMode !== 'none' : true,\n    headerMode: headerMode && headerMode !== 'none' ? headerMode : undefined,\n    keyboardHandlingEnabled: keyboardHandlingEnabled\n  };\n  var _useNavigationBuilder = (0, _native.useNavigationBuilder)(_native.StackRouter, {\n      id: id,\n      initialRouteName: initialRouteName,\n      children: children,\n      screenListeners: screenListeners,\n      screenOptions: screenOptions,\n      defaultScreenOptions: defaultScreenOptions\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation,\n    NavigationContent = _useNavigationBuilder.NavigationContent;\n  React.useEffect(function () {\n    var _navigation$addListen;\n    return (\n      (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n        var isFocused = navigation.isFocused();\n\n        requestAnimationFrame(function () {\n          if (state.index > 0 && isFocused && !e.defaultPrevented) {\n            navigation.dispatch((0, _extends3.default)({}, _native.StackActions.popToTop(), {\n              target: state.key\n            }));\n          }\n        });\n      })\n    );\n  }, [navigation, state.index, state.key]);\n  return React.createElement(NavigationContent, null, React.createElement(_StackView.default, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\nvar _default = (0, _native.createNavigatorFactory)(StackNavigator);\nexports.default = _default;","map":{"version":3,"sources":["createStackNavigator.tsx"],"names":["StackNavigator","id","initialRouteName","children","screenListeners","screenOptions","rest","mode","warnOnce","headerMode","keyboardHandlingEnabled","undefined","defaultScreenOptions","presentation","headerShown","state","descriptors","navigation","NavigationContent","useNavigationBuilder","StackRouter","React","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","StackActions","popToTop","target","key","createNavigatorFactory"],"mappings":"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","sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  StackHeaderMode,\n  StackNavigationConfig,\n  StackNavigationEventMap,\n  StackNavigationOptions,\n} from '../types';\nimport StackView from '../views/Stack/StackView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap\n> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  id,\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: Props) {\n  // @ts-expect-error: mode is deprecated\n  const mode = rest.mode as 'card' | 'modal' | undefined;\n\n  warnOnce(\n    mode != null,\n    `Stack Navigator: 'mode=\"${mode}\"' is deprecated. Use 'presentation: \"${mode}\"' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator#presentation for more details.`\n  );\n\n  // @ts-expect-error: headerMode='none' is deprecated\n  const headerMode = rest.headerMode as StackHeaderMode | 'none' | undefined;\n\n  warnOnce(\n    headerMode === 'none',\n    `Stack Navigator: 'headerMode=\"none\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headershown for more details.`\n  );\n\n  warnOnce(\n    headerMode != null && headerMode !== 'none',\n    `Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headermode for more details.`\n  );\n\n  // @ts-expect-error: headerMode='none' is deprecated\n  const keyboardHandlingEnabled = rest.keyboardHandlingEnabled;\n\n  warnOnce(\n    keyboardHandlingEnabled !== undefined,\n    `Stack Navigator: 'keyboardHandlingEnabled' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#keyboardhandlingenabled for more details.`\n  );\n\n  const defaultScreenOptions: StackNavigationOptions = {\n    presentation: mode,\n    headerShown: headerMode ? headerMode !== 'none' : true,\n    headerMode: headerMode && headerMode !== 'none' ? headerMode : undefined,\n    keyboardHandlingEnabled,\n  };\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      StackNavigationOptions,\n      StackNavigationEventMap\n    >(StackRouter, {\n      id,\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  React.useEffect(\n    () =>\n      // @ts-expect-error: there may not be a tab navigator in parent\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as unknown as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <StackView\n        {...rest}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"script"}