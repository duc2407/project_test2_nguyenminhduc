{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createHandler;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\nvar _RNGestureHandlerModule = _interopRequireDefault(require(\"../RNGestureHandlerModule\"));\nvar _State = require(\"../State\");\nvar _handlersRegistry = require(\"./handlersRegistry\");\nvar _gestureHandlerCommon = require(\"./gestureHandlerCommon\");\nvar _utils = require(\"../utils\");\nvar _ActionType = require(\"../ActionType\");\nvar _PressabilityDebugView = require(\"./PressabilityDebugView\");\nvar _stateToPropMappings;\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar _UIManagerAny$getView, _UIManagerAny$getView2, _UIManagerAny$getCons;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar UIManagerAny = _reactNative.UIManager;\nvar customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nvar customGHEventsConfig = (0, _extends2.default)({\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n}, (0, _utils.isFabric)() && _reactNative.Platform.OS === 'android' && customGHEventsConfigFabricAndroid);\n\nUIManagerAny.genericDirectEventTypes = (0, _extends2.default)({}, UIManagerAny.genericDirectEventTypes, customGHEventsConfig);\n\nvar UIManagerConstants = (_UIManagerAny$getView = (_UIManagerAny$getView2 = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny$getView2 === void 0 ? void 0 : _UIManagerAny$getView2.call(UIManagerAny, 'getConstants')) !== null && _UIManagerAny$getView !== void 0 ? _UIManagerAny$getView : (_UIManagerAny$getCons = UIManagerAny.getConstants) === null || _UIManagerAny$getCons === void 0 ? void 0 : _UIManagerAny$getCons.call(UIManagerAny);\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = (0, _extends2.default)({}, UIManagerConstants.genericDirectEventTypes, customGHEventsConfig);\n}\n\nvar _UIManagerAny$setJSRe = UIManagerAny.setJSResponder,\n  oldSetJSResponder = _UIManagerAny$setJSRe === void 0 ? function () {\n  } : _UIManagerAny$setJSRe,\n  _UIManagerAny$clearJS = UIManagerAny.clearJSResponder,\n  oldClearJSResponder = _UIManagerAny$clearJS === void 0 ? function () {\n  } : _UIManagerAny$clearJS;\nUIManagerAny.setJSResponder = function (tag, blockNativeResponder) {\n  _RNGestureHandlerModule.default.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = function () {\n  _RNGestureHandlerModule.default.handleClearJSResponder();\n  oldClearJSResponder();\n};\nvar allowTouches = true;\nvar DEV_ON_ANDROID = __DEV__ && _reactNative.Platform.OS === 'android';\n\nif (DEV_ON_ANDROID) {\n  _reactNative.DeviceEventEmitter.addListener('toggleElementInspector', function () {\n    allowTouches = !allowTouches;\n  });\n}\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\nvar stateToPropMappings = (_stateToPropMappings = {}, (0, _defineProperty3.default)(_stateToPropMappings, _State.State.UNDETERMINED, undefined), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.BEGAN, 'onBegan'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.FAILED, 'onFailed'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.CANCELLED, 'onCancelled'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.ACTIVE, 'onActivated'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.END, 'onEnded'), _stateToPropMappings);\nvar UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\nfunction createHandler(_ref) {\n  var name = _ref.name,\n    _ref$allowedProps = _ref.allowedProps,\n    allowedProps = _ref$allowedProps === void 0 ? [] : _ref$allowedProps,\n    _ref$config = _ref.config,\n    config = _ref$config === void 0 ? {} : _ref$config,\n    transformProps = _ref.transformProps,\n    _ref$customNativeProp = _ref.customNativeProps,\n    customNativeProps = _ref$customNativeProp === void 0 ? [] : _ref$customNativeProp;\n  var Handler = function (_React$Component) {\n    (0, _inherits2.default)(Handler, _React$Component);\n    var _super = _createSuper(Handler);\n    function Handler(props) {\n      var _this;\n      (0, _classCallCheck2.default)(this, Handler);\n      _this = _super.call(this, props);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"handlerTag\", void 0);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"config\", void 0);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"propsRef\", void 0);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"viewNode\", void 0);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"viewTag\", void 0);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"updateEnqueued\", null);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"inspectorToggleListener\", void 0);\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"onGestureHandlerEvent\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          if (typeof _this.props.onGestureEvent === 'function') {\n            var _this$props$onGesture, _this$props;\n            (_this$props$onGesture = (_this$props = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n          }\n        } else {\n          var _this$props$onGesture2, _this$props2;\n          (_this$props$onGesture2 = (_this$props2 = _this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n        }\n      });\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"onGestureHandlerStateChange\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          if (typeof _this.props.onHandlerStateChange === 'function') {\n            var _this$props$onHandler, _this$props3;\n            (_this$props$onHandler = (_this$props3 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n          }\n          var state = event.nativeEvent.state;\n          var stateEventName = stateToPropMappings[state];\n          var eventHandler = stateEventName && _this.props[stateEventName];\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          var _this$props$onGesture3, _this$props4;\n          (_this$props$onGesture3 = (_this$props4 = _this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n        }\n      });\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"refHandler\", function (node) {\n        _this.viewNode = node;\n        var child = React.Children.only(_this.props.children);\n\n        var ref = child.ref;\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      });\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"createGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        _RNGestureHandlerModule.default.createGestureHandler(name, _this.handlerTag, newConfig);\n      });\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"attachGestureHandler\", function (newViewTag) {\n        _this.viewTag = newViewTag;\n        if (_reactNative.Platform.OS === 'web') {\n          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, _ActionType.ActionType.JS_FUNCTION_OLD_API,\n          _this.propsRef);\n        } else {\n          (0, _handlersRegistry.registerOldGestureHandler)(_this.handlerTag, {\n            onGestureEvent: _this.onGestureHandlerEvent,\n            onGestureStateChange: _this.onGestureHandlerStateChange\n          });\n          var actionType = function () {\n            var _this$props5, _this$props6;\n            if ((_this$props5 = _this.props) !== null && _this$props5 !== void 0 && _this$props5.onGestureEvent && 'current' in _this.props.onGestureEvent) {\n              return _ActionType.ActionType.REANIMATED_WORKLET;\n            } else if ((_this$props6 = _this.props) !== null && _this$props6 !== void 0 && _this$props6.onGestureEvent && '__isNative' in _this.props.onGestureEvent) {\n              return _ActionType.ActionType.NATIVE_ANIMATED_EVENT;\n            } else {\n              return _ActionType.ActionType.JS_FUNCTION_OLD_API;\n            }\n          }();\n          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, actionType);\n        }\n        (0, _gestureHandlerCommon.scheduleFlushOperations)();\n      });\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"updateGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        _RNGestureHandlerModule.default.updateGestureHandler(_this.handlerTag, newConfig);\n        (0, _gestureHandlerCommon.scheduleFlushOperations)();\n      });\n      _this.handlerTag = (0, _handlersRegistry.getNextHandlerTag)();\n      _this.config = {};\n      _this.propsRef = React.createRef();\n      _this.state = {\n        allowTouches: allowTouches\n      };\n      if (props.id) {\n        if (_handlersRegistry.handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\" + props.id + \"\\\" already registered\");\n        }\n        _handlersRegistry.handlerIDToTag[props.id] = _this.handlerTag;\n      }\n      return _this;\n    }\n    (0, _createClass2.default)(Handler, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        var props = this.props;\n        if (DEV_ON_ANDROID) {\n          this.inspectorToggleListener = _reactNative.DeviceEventEmitter.addListener('toggleElementInspector', function () {\n            _this2.setState(function (_) {\n              return {\n                allowTouches: allowTouches\n              };\n            });\n            _this2.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          });\n        }\n        if (hasUnresolvedRefs(props)) {\n          this.updateEnqueued = setImmediate(function () {\n            _this2.updateEnqueued = null;\n            _this2.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          });\n        }\n        this.createGestureHandler((0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config));\n        this.attachGestureHandler((0, _gestureHandlerCommon.findNodeHandle)(this.viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(this.viewNode);\n        if (this.viewTag !== viewTag) {\n          this.attachGestureHandler(viewTag);\n        }\n\n        this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this$inspectorToggle;\n        (_this$inspectorToggle = this.inspectorToggleListener) === null || _this$inspectorToggle === void 0 ? void 0 : _this$inspectorToggle.remove();\n        _RNGestureHandlerModule.default.dropGestureHandler(this.handlerTag);\n        (0, _gestureHandlerCommon.scheduleFlushOperations)();\n        if (this.updateEnqueued) {\n          clearImmediate(this.updateEnqueued);\n        }\n\n        var handlerID = this.props.id;\n        if (handlerID) {\n          delete _handlersRegistry.handlerIDToTag[handlerID];\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(remainingTries) {\n        var _this3 = this;\n        var props = this.props;\n\n        if (hasUnresolvedRefs(props) && remainingTries > 0) {\n          this.updateEnqueued = setImmediate(function () {\n            _this3.updateEnqueued = null;\n            _this3.update(remainingTries - 1);\n          });\n        } else {\n          var newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config);\n          if (!(0, _isEqual.default)(this.config, newConfig)) {\n            this.updateGestureHandler(newConfig);\n          }\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = (0, _extends2.default)({}, this.props, updates);\n        var newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(mergedProps) : mergedProps, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config);\n        this.updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props$testID;\n        var gestureEventHandler = this.onGestureHandlerEvent;\n\n        var _this$props7 = this.props,\n          onGestureEvent = _this$props7.onGestureEvent,\n          onGestureHandlerEvent = _this$props7.onGestureHandlerEvent;\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureEventHandler = onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var gestureStateEventHandler = this.onGestureHandlerStateChange;\n\n        var _this$props8 = this.props,\n          onHandlerStateChange = _this$props8.onHandlerStateChange,\n          onGestureHandlerStateChange = _this$props8.onGestureHandlerStateChange;\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureStateEventHandler = onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var events = {\n          onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,\n          onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined\n        };\n        this.propsRef.current = events;\n        var child = null;\n        try {\n          child = React.Children.only(this.props.children);\n        } catch (e) {\n          throw new Error((0, _utils.tagMessage)(name + \" got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.\"));\n        }\n        var grandChildren = child.props.children;\n        if (__DEV__ && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(React.createElement(_PressabilityDebugView.PressabilityDebugView, {\n            key: \"pressabilityDebugView\",\n            color: \"mediumspringgreen\",\n            hitSlop: child.props.hitSlop\n          }));\n        }\n        return React.cloneElement(child, (0, _extends2.default)({\n          ref: this.refHandler,\n          collapsable: false\n        }, (0, _utils.isJestEnv)() ? {\n          handlerType: name,\n          handlerTag: this.handlerTag\n        } : {}, {\n          testID: (_this$props$testID = this.props.testID) !== null && _this$props$testID !== void 0 ? _this$props$testID : child.props.testID\n        }, events), grandChildren);\n      }\n    }]);\n    return Handler;\n  }(React.Component);\n  _defineProperty(Handler, \"displayName\", name);\n  return Handler;\n}","map":{"version":3,"mappings":"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","names":["UIManagerAny","UIManager","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","registrationName","topOnGestureHandlerStateChange","customGHEventsConfig","onGestureHandlerEvent","onGestureHandlerStateChange","isFabric","Platform","OS","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","_UIManagerAny$getView2","getConstants","_UIManagerAny$getCons","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","RNGestureHandlerModule","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","State","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","constructor","_defineProperty","event","nativeEvent","handlerTag","onGestureEvent","onHandlerStateChange","state","stateEventName","eventHandler","node","viewNode","child","React","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","ActionType","JS_FUNCTION_OLD_API","propsRef","registerOldGestureHandler","onGestureStateChange","actionType","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","scheduleFlushOperations","updateGestureHandler","getNextHandlerTag","createRef","id","handlerIDToTag","Error","componentDidMount","inspectorToggleListener","setState","_","update","updateEnqueued","setImmediate","filterConfig","findNodeHandle","componentDidUpdate","componentWillUnmount","remove","dropGestureHandler","clearImmediate","handlerID","remainingTries","deepEqual","setNativeProps","updates","mergedProps","render","gestureEventHandler","gestureStateEventHandler","events","e","tagMessage","grandChildren","type","displayName","toArray","push","PressabilityDebugView","key","color","hitSlop","cloneElement","refHandler","collapsable","isJestEnv","handlerType","testID","Component"],"sources":["createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  getNextHandlerTag,\n  registerOldGestureHandler,\n} from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n  scheduleFlushOperations,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\nimport { isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          if (\n            this.props?.onGestureEvent &&\n            'current' in this.props.onGestureEvent\n          ) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (\n            this.props?.onGestureEvent &&\n            '__isNative' in this.props.onGestureEvent\n          ) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isJestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"script"}