{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.onGestureHandlerEvent = onGestureHandlerEvent;\nexports.startListening = startListening;\nexports.stopListening = stopListening;\nvar _reactNative = require(\"react-native\");\nvar _State = require(\"../../State\");\nvar _TouchEventType = require(\"../../TouchEventType\");\nvar _handlersRegistry = require(\"../handlersRegistry\");\nvar _gestureStateManager = require(\"./gestureStateManager\");\nvar gestureHandlerEventSubscription = null;\nvar gestureHandlerStateChangeEventSubscription = null;\nvar gestureStateManagers = new Map();\nvar lastUpdateEvent = [];\nfunction isStateChangeEvent(event) {\n  return event.oldState != null;\n}\nfunction isTouchEvent(event) {\n  return event.eventType != null;\n}\nfunction onGestureHandlerEvent(event) {\n  var _handler$handlers7, _handler$handlers7$on, _handler$handlers8, _handler$handlers8$on, _handler$handlers9, _handler$handlers9$on, _handler$handlers10, _handler$handlers10$o;\n  var handler = (0, _handlersRegistry.findHandler)(event.handlerTag);\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {\n        var _handler$handlers$onB, _handler$handlers;\n        (_handler$handlers$onB = (_handler$handlers = handler.handlers).onBegin) === null || _handler$handlers$onB === void 0 ? void 0 : _handler$handlers$onB.call(_handler$handlers, event);\n      } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {\n        var _handler$handlers$onS, _handler$handlers2;\n        (_handler$handlers$onS = (_handler$handlers2 = handler.handlers).onStart) === null || _handler$handlers$onS === void 0 ? void 0 : _handler$handlers$onS.call(_handler$handlers2, event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === _State.State.END) {\n        var _handler$handlers$onF, _handler$handlers4;\n        if (event.oldState === _State.State.ACTIVE) {\n          var _handler$handlers$onE, _handler$handlers3;\n          (_handler$handlers$onE = (_handler$handlers3 = handler.handlers).onEnd) === null || _handler$handlers$onE === void 0 ? void 0 : _handler$handlers$onE.call(_handler$handlers3, event, true);\n        }\n        (_handler$handlers$onF = (_handler$handlers4 = handler.handlers).onFinalize) === null || _handler$handlers$onF === void 0 ? void 0 : _handler$handlers$onF.call(_handler$handlers4, event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.oldState !== event.state) {\n        var _handler$handlers$onF2, _handler$handlers6;\n        if (event.oldState === _State.State.ACTIVE) {\n          var _handler$handlers$onE2, _handler$handlers5;\n          (_handler$handlers$onE2 = (_handler$handlers5 = handler.handlers).onEnd) === null || _handler$handlers$onE2 === void 0 ? void 0 : _handler$handlers$onE2.call(_handler$handlers5, event, false);\n        }\n        (_handler$handlers$onF2 = (_handler$handlers6 = handler.handlers).onFinalize) === null || _handler$handlers$onF2 === void 0 ? void 0 : _handler$handlers$onF2.call(_handler$handlers6, event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(event.handlerTag, _gestureStateManager.GestureStateManager.create(event.handlerTag));\n      }\n\n      var manager = gestureStateManagers.get(event.handlerTag);\n      switch (event.eventType) {\n        case _TouchEventType.TouchEventType.TOUCHES_DOWN:\n          (_handler$handlers7 = handler.handlers) === null || _handler$handlers7 === void 0 ? void 0 : (_handler$handlers7$on = _handler$handlers7.onTouchesDown) === null || _handler$handlers7$on === void 0 ? void 0 : _handler$handlers7$on.call(_handler$handlers7, event, manager);\n          break;\n        case _TouchEventType.TouchEventType.TOUCHES_MOVE:\n          (_handler$handlers8 = handler.handlers) === null || _handler$handlers8 === void 0 ? void 0 : (_handler$handlers8$on = _handler$handlers8.onTouchesMove) === null || _handler$handlers8$on === void 0 ? void 0 : _handler$handlers8$on.call(_handler$handlers8, event, manager);\n          break;\n        case _TouchEventType.TouchEventType.TOUCHES_UP:\n          (_handler$handlers9 = handler.handlers) === null || _handler$handlers9 === void 0 ? void 0 : (_handler$handlers9$on = _handler$handlers9.onTouchesUp) === null || _handler$handlers9$on === void 0 ? void 0 : _handler$handlers9$on.call(_handler$handlers9, event, manager);\n          break;\n        case _TouchEventType.TouchEventType.TOUCHES_CANCELLED:\n          (_handler$handlers10 = handler.handlers) === null || _handler$handlers10 === void 0 ? void 0 : (_handler$handlers10$o = _handler$handlers10.onTouchesCancelled) === null || _handler$handlers10$o === void 0 ? void 0 : _handler$handlers10$o.call(_handler$handlers10, event, manager);\n          break;\n      }\n    } else {\n      var _handler$handlers$onU, _handler$handlers11;\n      (_handler$handlers$onU = (_handler$handlers11 = handler.handlers).onUpdate) === null || _handler$handlers$onU === void 0 ? void 0 : _handler$handlers$onU.call(_handler$handlers11, event);\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        var _handler$handlers$onC, _handler$handlers12, _handler$handlers$cha, _handler$handlers13;\n        (_handler$handlers$onC = (_handler$handlers12 = handler.handlers).onChange) === null || _handler$handlers$onC === void 0 ? void 0 : _handler$handlers$onC.call(_handler$handlers12, (_handler$handlers$cha = (_handler$handlers13 = handler.handlers).changeEventCalculator) === null || _handler$handlers$cha === void 0 ? void 0 : _handler$handlers$cha.call(_handler$handlers13, event, lastUpdateEvent[handler.handlers.handlerTag]));\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    var oldHandler = (0, _handlersRegistry.findOldGestureHandler)(event.handlerTag);\n    if (oldHandler) {\n      var nativeEvent = {\n        nativeEvent: event\n      };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\nfunction startListening() {\n  stopListening();\n  gestureHandlerEventSubscription = _reactNative.DeviceEventEmitter.addListener('onGestureHandlerEvent', onGestureHandlerEvent);\n  gestureHandlerStateChangeEventSubscription = _reactNative.DeviceEventEmitter.addListener('onGestureHandlerStateChange', onGestureHandlerEvent);\n}\nfunction stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}","map":{"version":3,"mappings":"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","names":["gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","gestureStateManagers","Map","lastUpdateEvent","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","handler","findHandler","handlerTag","State","UNDETERMINED","state","BEGAN","handlers","onBegin","ACTIVE","onStart","END","onEnd","onFinalize","undefined","FAILED","CANCELLED","delete","has","set","GestureStateManager","create","manager","get","TouchEventType","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","onUpdate","onChange","changeEventCalculator","_handler$handlers$cha","oldHandler","findOldGestureHandler","nativeEvent","onGestureStateChange","onGestureEvent","startListening","stopListening","DeviceEventEmitter","addListener","remove"],"sources":["eventReceiver.ts"],"sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { findHandler, findOldGestureHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null = null;\n\nconst gestureStateManagers: Map<number, GestureStateManagerType> = new Map<\n  number,\n  GestureStateManagerType\n>();\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nexport function onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(\n          event.handlerTag,\n          GestureStateManager.create(event.handlerTag)\n        );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const manager = gestureStateManagers.get(event.handlerTag)!;\n\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, manager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    const oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      const nativeEvent = { nativeEvent: event };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}