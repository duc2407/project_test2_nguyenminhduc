{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIsModalPresentation = exports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _color = _interopRequireDefault(require(\"color\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _CardStyleInterpolators = require(\"../../TransitionConfigs/CardStyleInterpolators\");\nvar _CardAnimationContext = _interopRequireDefault(require(\"../../utils/CardAnimationContext\"));\nvar _getDistanceForDirection = _interopRequireDefault(require(\"../../utils/getDistanceForDirection\"));\nvar _getInvertedMultiplier = _interopRequireDefault(require(\"../../utils/getInvertedMultiplier\"));\nvar _memoize = _interopRequireDefault(require(\"../../utils/memoize\"));\nvar _GestureHandler = require(\"../GestureHandler\");\nvar _ModalStatusBarManager = _interopRequireDefault(require(\"../ModalStatusBarManager\"));\nvar _CardSheet = _interopRequireDefault(require(\"./CardSheet\"));\nvar _excluded = [\"styleInterpolator\", \"interpolationIndex\", \"current\", \"gesture\", \"next\", \"layout\", \"insets\", \"overlay\", \"overlayEnabled\", \"shadowEnabled\", \"gestureEnabled\", \"gestureDirection\", \"pageOverflowEnabled\", \"headerDarkContent\", \"children\", \"containerStyle\", \"contentStyle\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar GESTURE_VELOCITY_IMPACT = 0.3;\nvar TRUE = 1;\nvar FALSE = 0;\n\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nvar useNativeDriver = _reactNative.Platform.OS !== 'web';\nvar hasOpacityStyle = function hasOpacityStyle(style) {\n  if (style) {\n    var flattenedStyle = _reactNative.StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n  return false;\n};\nvar Card = function (_React$Component) {\n  (0, _inherits2.default)(Card, _React$Component);\n  var _super = _createSuper(Card);\n  function Card() {\n    var _this;\n    (0, _classCallCheck2.default)(this, Card);\n    _this = _super.apply(this, arguments);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"isCurrentlyMounted\", false);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"isClosing\", new _reactNative.Animated.Value(FALSE));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"inverted\", new _reactNative.Animated.Value((0, _getInvertedMultiplier.default)(_this.props.gestureDirection)));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"layout\", {\n      width: new _reactNative.Animated.Value(_this.props.layout.width),\n      height: new _reactNative.Animated.Value(_this.props.layout.height)\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"isSwiping\", new _reactNative.Animated.Value(FALSE));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"interactionHandle\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"pendingGestureCallback\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"lastToValue\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"animate\", function (_ref) {\n      var closing = _ref.closing,\n        velocity = _ref.velocity;\n      var _this$props = _this.props,\n        gesture = _this$props.gesture,\n        transitionSpec = _this$props.transitionSpec,\n        onOpen = _this$props.onOpen,\n        onClose = _this$props.onClose,\n        onTransition = _this$props.onTransition;\n      var toValue = _this.getAnimateToValue((0, _extends3.default)({}, _this.props, {\n        closing: closing\n      }));\n      _this.lastToValue = toValue;\n      _this.isClosing.setValue(closing ? TRUE : FALSE);\n      var spec = closing ? transitionSpec.close : transitionSpec.open;\n      var animation = spec.animation === 'spring' ? _reactNative.Animated.spring : _reactNative.Animated.timing;\n      _this.setPointerEventsEnabled(!closing);\n      _this.handleStartInteraction();\n      clearTimeout(_this.pendingGestureCallback);\n      onTransition === null || onTransition === void 0 ? void 0 : onTransition({\n        closing: closing,\n        gesture: velocity !== undefined\n      });\n      animation(gesture, (0, _extends3.default)({}, spec.config, {\n        velocity: velocity,\n        toValue: toValue,\n        useNativeDriver: useNativeDriver,\n        isInteraction: false\n      })).start(function (_ref2) {\n        var finished = _ref2.finished;\n        _this.handleEndInteraction();\n        clearTimeout(_this.pendingGestureCallback);\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n          if (_this.isCurrentlyMounted) {\n            _this.forceUpdate();\n          }\n        }\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getAnimateToValue\", function (_ref3) {\n      var closing = _ref3.closing,\n        layout = _ref3.layout,\n        gestureDirection = _ref3.gestureDirection;\n      if (!closing) {\n        return 0;\n      }\n      return (0, _getDistanceForDirection.default)(layout, gestureDirection);\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"setPointerEventsEnabled\", function (enabled) {\n      var _this$contentRef$curr;\n      var pointerEvents = enabled ? 'box-none' : 'none';\n      (_this$contentRef$curr = _this.contentRef.current) === null || _this$contentRef$curr === void 0 ? void 0 : _this$contentRef$curr.setNativeProps({\n        pointerEvents: pointerEvents\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleStartInteraction\", function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = _reactNative.InteractionManager.createInteractionHandle();\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleEndInteraction\", function () {\n      if (_this.interactionHandle !== undefined) {\n        _reactNative.InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleGestureStateChange\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props2 = _this.props,\n        layout = _this$props2.layout,\n        onClose = _this$props2.onClose,\n        onGestureBegin = _this$props2.onGestureBegin,\n        onGestureCanceled = _this$props2.onGestureCanceled,\n        onGestureEnd = _this$props2.onGestureEnd,\n        gestureDirection = _this$props2.gestureDirection,\n        gestureVelocityImpact = _this$props2.gestureVelocityImpact;\n      switch (nativeEvent.state) {\n        case _GestureHandler.GestureState.ACTIVE:\n          _this.isSwiping.setValue(TRUE);\n          _this.handleStartInteraction();\n          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();\n          break;\n        case _GestureHandler.GestureState.CANCELLED:\n          {\n            _this.isSwiping.setValue(FALSE);\n            _this.handleEndInteraction();\n            var velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n            _this.animate({\n              closing: _this.props.closing,\n              velocity: velocity\n            });\n            onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();\n            break;\n          }\n        case _GestureHandler.GestureState.END:\n          {\n            _this.isSwiping.setValue(FALSE);\n            var distance;\n            var translation;\n            var _velocity;\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              _velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              _velocity = nativeEvent.velocityX;\n            }\n            var closing = (translation + _velocity * gestureVelocityImpact) * (0, _getInvertedMultiplier.default)(gestureDirection) > distance / 2 ? _velocity !== 0 || translation !== 0 : _this.props.closing;\n            _this.animate({\n              closing: closing,\n              velocity: _velocity\n            });\n            if (closing) {\n              _this.pendingGestureCallback = setTimeout(function () {\n                onClose();\n\n                _this.forceUpdate();\n              }, 32);\n            }\n            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getInterpolatedStyle\", (0, _memoize.default)(function (styleInterpolator, animation) {\n      return styleInterpolator(animation);\n    }));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getCardAnimation\", (0, _memoize.default)(function (interpolationIndex, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return {\n        index: interpolationIndex,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      };\n    }));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"contentRef\", React.createRef());\n    return _this;\n  }\n  (0, _createClass2.default)(Card, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animate({\n        closing: this.props.closing\n      });\n      this.isCurrentlyMounted = true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n        layout = _this$props3.layout,\n        gestureDirection = _this$props3.gestureDirection,\n        closing = _this$props3.closing;\n      var width = layout.width,\n        height = layout.height;\n      if (width !== prevProps.layout.width) {\n        this.layout.width.setValue(width);\n      }\n      if (height !== prevProps.layout.height) {\n        this.layout.height.setValue(height);\n      }\n      if (gestureDirection !== prevProps.gestureDirection) {\n        this.inverted.setValue((0, _getInvertedMultiplier.default)(gestureDirection));\n      }\n      var toValue = this.getAnimateToValue(this.props);\n      if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n        this.animate({\n          closing: closing\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.gesture.stopAnimation();\n      this.isCurrentlyMounted = false;\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"gestureActivationCriteria\",\n    value: function gestureActivationCriteria() {\n      var _this$props4 = this.props,\n        layout = _this$props4.layout,\n        gestureDirection = _this$props4.gestureDirection,\n        gestureResponseDistance = _this$props4.gestureResponseDistance;\n      var enableTrackpadTwoFingerGesture = true;\n      var distance = gestureResponseDistance !== undefined ? gestureResponseDistance : gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? GESTURE_RESPONSE_DISTANCE_VERTICAL : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n      if (gestureDirection === 'vertical') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: 5,\n          hitSlop: {\n            bottom: -layout.height + distance\n          },\n          enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n        };\n      } else if (gestureDirection === 'vertical-inverted') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: -5,\n          hitSlop: {\n            top: -layout.height + distance\n          },\n          enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n        };\n      } else {\n        var hitSlop = -layout.width + distance;\n        var invertedMultiplier = (0, _getInvertedMultiplier.default)(gestureDirection);\n        if (invertedMultiplier === 1) {\n          return {\n            minOffsetX: 5,\n            maxDeltaY: 20,\n            hitSlop: {\n              right: hitSlop\n            },\n            enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n          };\n        } else {\n          return {\n            minOffsetX: -5,\n            maxDeltaY: 20,\n            hitSlop: {\n              left: hitSlop\n            },\n            enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n          };\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n        styleInterpolator = _this$props5.styleInterpolator,\n        interpolationIndex = _this$props5.interpolationIndex,\n        current = _this$props5.current,\n        gesture = _this$props5.gesture,\n        next = _this$props5.next,\n        layout = _this$props5.layout,\n        insets = _this$props5.insets,\n        overlay = _this$props5.overlay,\n        overlayEnabled = _this$props5.overlayEnabled,\n        shadowEnabled = _this$props5.shadowEnabled,\n        gestureEnabled = _this$props5.gestureEnabled,\n        gestureDirection = _this$props5.gestureDirection,\n        pageOverflowEnabled = _this$props5.pageOverflowEnabled,\n        headerDarkContent = _this$props5.headerDarkContent,\n        children = _this$props5.children,\n        customContainerStyle = _this$props5.containerStyle,\n        contentStyle = _this$props5.contentStyle,\n        rest = (0, _objectWithoutProperties2.default)(_this$props5, _excluded);\n      var interpolationProps = this.getCardAnimation(interpolationIndex, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, interpolationProps);\n      var containerStyle = interpolatedStyle.containerStyle,\n        cardStyle = interpolatedStyle.cardStyle,\n        overlayStyle = interpolatedStyle.overlayStyle,\n        shadowStyle = interpolatedStyle.shadowStyle;\n      var handleGestureEvent = gestureEnabled ? _reactNative.Animated.event([{\n        nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n          translationY: gesture\n        } : {\n          translationX: gesture\n        }\n      }], {\n        useNativeDriver: useNativeDriver\n      }) : undefined;\n      var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(contentStyle || {}),\n        backgroundColor = _StyleSheet$flatten.backgroundColor;\n      var isTransparent = typeof backgroundColor === 'string' ? (0, _color.default)(backgroundColor).alpha() === 0 : false;\n      return React.createElement(_CardAnimationContext.default.Provider, {\n        value: interpolationProps\n      },\n      _reactNative.Platform.OS === 'ios' && overlayEnabled && next && getIsModalPresentation(styleInterpolator) ? React.createElement(_ModalStatusBarManager.default, {\n        dark: headerDarkContent,\n        layout: layout,\n        insets: insets,\n        style: cardStyle\n      }) : null, React.createElement(_reactNative.Animated.View, {\n        style: {\n          opacity: current\n        },\n\n        collapsable: false\n      }), React.createElement(_reactNative.View, _extends({\n        pointerEvents: \"box-none\"\n      }, rest), overlayEnabled ? React.createElement(_reactNative.View, {\n        pointerEvents: \"box-none\",\n        style: _reactNative.StyleSheet.absoluteFill\n      }, overlay({\n        style: overlayStyle\n      })) : null, React.createElement(_reactNative.Animated.View, {\n        style: [styles.container, containerStyle, customContainerStyle],\n        pointerEvents: \"box-none\"\n      }, React.createElement(_GestureHandler.PanGestureHandler, _extends({\n        enabled: layout.width !== 0 && gestureEnabled,\n        onGestureEvent: handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange\n      }, this.gestureActivationCriteria()), React.createElement(_reactNative.Animated.View, {\n        needsOffscreenAlphaCompositing: hasOpacityStyle(cardStyle),\n        style: [styles.container, cardStyle]\n      }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(_reactNative.Animated.View, {\n        style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n          backgroundColor: backgroundColor\n        }, shadowStyle],\n        pointerEvents: \"none\"\n      }) : null, React.createElement(_CardSheet.default, {\n        ref: this.contentRef,\n        enabled: pageOverflowEnabled,\n        layout: layout,\n        style: contentStyle\n      }, children))))));\n    }\n  }]);\n  return Card;\n}(React.Component);\nexports.default = Card;\n_defineProperty(Card, \"defaultProps\", {\n  shadowEnabled: false,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: function overlay(_ref5) {\n    var style = _ref5.style;\n    return style ? React.createElement(_reactNative.Animated.View, {\n      pointerEvents: \"none\",\n      style: [styles.overlay, style]\n    }) : null;\n  }\n});\nvar getIsModalPresentation = function getIsModalPresentation(cardStyleInterpolator) {\n  return cardStyleInterpolator === _CardStyleInterpolators.forModalPresentationIOS ||\n  cardStyleInterpolator.name === 'forModalPresentationIOS';\n};\nexports.getIsModalPresentation = getIsModalPresentation;\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["Card.tsx"],"names":["GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","OS","hasOpacityStyle","style","flattenedStyle","StyleSheet","flatten","opacity","Card","React","Component","shadowEnabled","gestureEnabled","gestureVelocityImpact","overlay","styles","componentDidMount","animate","closing","props","isCurrentlyMounted","componentDidUpdate","prevProps","layout","gestureDirection","width","height","setValue","inverted","getInvertedMultiplier","toValue","getAnimateToValue","lastToValue","componentWillUnmount","gesture","stopAnimation","handleEndInteraction","Animated","Value","velocity","transitionSpec","onOpen","onClose","onTransition","isClosing","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartInteraction","clearTimeout","pendingGestureCallback","undefined","config","isInteraction","start","finished","forceUpdate","getDistanceForDirection","enabled","pointerEvents","contentRef","current","setNativeProps","interactionHandle","InteractionManager","createInteractionHandle","clearInteractionHandle","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","state","GestureState","ACTIVE","isSwiping","CANCELLED","velocityY","velocityX","END","distance","translation","translationY","translationX","setTimeout","memoize","styleInterpolator","interpolationIndex","next","insetTop","insetRight","insetBottom","insetLeft","index","progress","swiping","layouts","screen","insets","top","right","bottom","left","gestureActivationCriteria","gestureResponseDistance","enableTrackpadTwoFingerGesture","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","createRef","render","overlayEnabled","pageOverflowEnabled","headerDarkContent","children","containerStyle","customContainerStyle","contentStyle","rest","interpolationProps","getCardAnimation","interpolatedStyle","getInterpolatedStyle","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","backgroundColor","isTransparent","Color","alpha","getIsModalPresentation","absoluteFill","container","handleGestureStateChange","shadow","shadowHorizontal","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom","cardStyleInterpolator","forModalPresentationIOS","name","create","flex","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AAYA;AAQA;AACA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,IAAMA,uBAAuB,GAAG,GAAhC;AAEA,IAAMC,IAAI,GAAG,CAAb;AACA,IAAMC,KAAK,GAAG,CAAd;;AAKA,IAAMC,oCAAoC,GAAG,EAA7C;AACA,IAAMC,kCAAkC,GAAG,GAA3C;AAEA,IAAMC,eAAe,GAAGC,qBAAQ,CAACC,EAATD,KAAgB,KAAxC;AAEA,IAAME,eAAe,GAAIC,SAAnBD,eAAe,CAAIC,KAAD,EAAgB;EACtC,IAAIA,KAAJ,EAAW;IACT,IAAMC,cAAc,GAAGC,uBAAU,CAACC,OAAXD,CAAmBF,KAAnBE,CAAvB;IACA,OAAOD,cAAc,CAACG,OAAfH,IAA0B,IAAjC;EACD;EAED,OAAO,KAAP;AACD,CAPD;AAAA,IASqBI,IAAN;EAAA;EAAA;EAA0C,gBAAA;IAAA;IAAA;IAAA,2BAAA,SAAA;IAAA,eAAA,8CAAA,oBAAA,EAyD1B,KAzD0B,CAAA;IAAA,eAAA,8CAAA,WAAA,EA2DnC,IAAI6B,qBAAQ,CAACC,KAAb,CAAmB1C,KAAnB,CA3DmC,CAAA;IAAA,eAAA,8CAAA,UAAA,EA6DpC,IAAIyC,qBAAQ,CAACC,KAAb,CACjBT,IAAAA,8BAAqB,EAAC,MAAKV,KAAL,CAAWK,gBAAZ,CADJ,CA7DoC,CAAA;IAAA,eAAA,8CAAA,QAAA,EAiEtC;MACfC,KAAK,EAAE,IAAIY,qBAAQ,CAACC,KAAb,CAAmB,MAAKnB,KAAL,CAAWI,MAAX,CAAkBE,KAArC,CADQ;MAEfC,MAAM,EAAE,IAAIW,qBAAQ,CAACC,KAAb,CAAmB,MAAKnB,KAAL,CAAWI,MAAX,CAAkBG,MAArC;IAFO,CAjEsC,CAAA;IAAA,eAAA,8CAAA,WAAA,EAsEnC,IAAIW,qBAAQ,CAACC,KAAb,CAAmB1C,KAAnB,CAtEmC,CAAA;IAAA,eAAA,8CAAA,mBAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,8CAAA,wBAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,8CAAA,aAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,8CAAA,SAAA,EA8ErC,UAAA,IAAA,EAMZ;MANa,IACjBsB,OADiB,GAMb,IAAA,CALJA,OADiB;QAEjBqB,QAAAA,GAII,IAAA,CAJJA,QAAAA;MAKA,kBACE,MAAKpB,KADP;QAAQe,OAAF,eAAEA,OAAF;QAAWM,cAAX,eAAWA,cAAX;QAA2BC,MAA3B,eAA2BA,MAA3B;QAAmCC,OAAnC,eAAmCA,OAAnC;QAA4CC,YAAAA,eAAAA,YAAAA;MAGlD,IAAMb,OAAO,GAAG,MAAKC,iBAAL,4BACX,MAAKZ,KAD6B;QAErCD,OAAAA,EAAAA;MAAAA,GAFF;MAKA,MAAKc,WAAL,GAAmBF,OAAnB;MAEA,MAAKc,SAAL,CAAejB,QAAf,CAAwBT,OAAO,GAAGvB,IAAH,GAAUC,KAAzC,CAAA;MAEA,IAAMiD,IAAI,GAAG3B,OAAO,GAAGsB,cAAc,CAACM,KAAlB,GAA0BN,cAAc,CAACO,IAA7D;MAEA,IAAMC,SAAS,GACbH,IAAI,CAACG,SAALH,KAAmB,QAAnBA,GAA8BR,qBAAQ,CAACY,MAAvCJ,GAAgDR,qBAAQ,CAACa,MAD3D;MAGA,MAAKC,uBAAL,CAA6B,CAACjC,OAA9B,CAAA;MACA,MAAKkC,sBAAL,EAAA;MAEAC,YAAY,CAAC,MAAKC,sBAAN,CAAZD;MAEAV,YAAY,KAAA,IAAZA,IAAAA,YAAY,KAAA,KAAA,CAAZA,GAAAA,KAAAA,CAAAA,GAAAA,YAAY,CAAG;QAAEzB,OAAF,EAAEA,OAAF;QAAWgB,OAAO,EAAEK,QAAQ,KAAKgB;MAAjC,CAAH,CAAZZ;MACAK,SAAS,CAACd,OAAD,6BACJW,IAAI,CAACW,MADS;QAEjBjB,QAFiB,EAEjBA,QAFiB;QAGjBT,OAHiB,EAGjBA,OAHiB;QAIjB/B,eAJiB,EAIjBA,eAJiB;QAKjB0D,aAAa,EAAE;MAAA,GALjBT,CAMGU,KANHV,CAMS,UAAA,KAAA,EAAkB;QAAjB,IAAEW,QAAAA,GAAe,KAAA,CAAfA,QAAAA;QACV,MAAKvB,oBAAL,EAAA;QAEAiB,YAAY,CAAC,MAAKC,sBAAN,CAAZD;QAEA,IAAIM,QAAJ,EAAc;UACZ,IAAIzC,OAAJ,EAAa;YACXwB,OAAO,EAAA;UACR,CAFD,MAEO;YACLD,MAAM,EAAA;UACP;UAED,IAAI,MAAKrB,kBAAT,EAA6B;YAE3B,MAAKwC,WAAL,EAAA;UACD;QACF;MACF,CAvBDZ,CAAAA;IAwBD,CApIsD,CAAA;IAAA,eAAA,8CAAA,mBAAA,EAsI3B,UAAA,KAAA,EAQtB;MARuB,IAC3B9B,OAD2B,GAQvB,KAAA,CAPJA,OAD2B;QAE3BK,MAF2B,GAQvB,KAAA,CANJA,MAF2B;QAG3BC,gBAAAA,GAKI,KAAA,CALJA,gBAAAA;MAMA,IAAI,CAACN,OAAL,EAAc;QACZ,OAAO,CAAP;MACD;MAED,OAAO2C,IAAAA,gCAAuB,EAACtC,MAAD,EAASC,gBAAT,CAA9B;IACD,CApJsD,CAAA;IAAA,eAAA,8CAAA,yBAAA,EAsJpBsC,UAAAA,OAAD,EAAsB;MAAA,IAAA,qBAAA;MACtD,IAAMC,aAAa,GAAGD,OAAO,GAAG,UAAH,GAAgB,MAA7C;MAEA,CAAA,qBAAA,GAAA,MAAKE,UAAL,CAAgBC,OAAhB,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAyBC,cAAzB,CAAwC;QAAEH,aAAAA,EAAAA;MAAF,CAAxC,CAAA;IACD,CA1JsD,CAAA;IAAA,eAAA,8CAAA,wBAAA,EA4JtB,YAAM;MACrC,IAAI,MAAKI,iBAAL,KAA2BZ,SAA/B,EAA0C;QACxC,MAAKY,iBAAL,GAAyBC,+BAAkB,CAACC,uBAAnBD,EAAzB;MACD;IACF,CAhKsD,CAAA;IAAA,eAAA,8CAAA,sBAAA,EAkKxB,YAAM;MACnC,IAAI,MAAKD,iBAAL,KAA2BZ,SAA/B,EAA0C;QACxCa,+BAAkB,CAACE,sBAAnBF,CAA0C,MAAKD,iBAA/CC,CAAAA;QACA,MAAKD,iBAAL,GAAyBZ,SAAzB;MACD;IACF,CAvKsD,CAAA;IAAA,eAAA,8CAAA,0BAAA,EAyKpB,UAAA,KAAA,EAEE;MAFD,IAClCgB,WAAAA,GACmC,KAAA,CADnCA,WAAAA;MAEA,mBAQI,MAAKpD,KART;QACEI,MADI,gBACJA,MADI;QAEJmB,OAFI,gBAEJA,OAFI;QAGJ8B,cAHI,gBAGJA,cAHI;QAIJC,iBAJI,gBAIJA,iBAJI;QAKJC,YALI,gBAKJA,YALI;QAMJlD,gBANI,gBAMJA,gBANI;QAOJX,qBAAAA,gBAAAA,qBAAAA;MAGF,QAAQ0D,WAAW,CAACI,KAApB;QACE,KAAKC,4BAAY,CAACC,MAAlB;UACE,MAAKC,SAAL,CAAenD,QAAf,CAAwBhC,IAAxB,CAAA;UACA,MAAKyD,sBAAL,EAAA;UACAoB,cAAc,KAAA,IAAdA,IAAAA,cAAc,KAAA,KAAA,CAAdA,GAAAA,KAAAA,CAAAA,GAAAA,cAAc,EAAA;UACd;QACF,KAAKI,4BAAY,CAACG,SAAlB;UAA6B;YAC3B,MAAKD,SAAL,CAAenD,QAAf,CAAwB/B,KAAxB,CAAA;YACA,MAAKwC,oBAAL,EAAA;YAEA,IAAMG,QAAQ,GACZf,gBAAgB,KAAK,UAArBA,IACAA,gBAAgB,KAAK,mBADrBA,GAEI+C,WAAW,CAACS,SAFhBxD,GAGI+C,WAAW,CAACU,SAJlB;YAMA,MAAKhE,OAAL,CAAa;cAAEC,OAAO,EAAE,MAAKC,KAAL,CAAWD,OAAtB;cAA+BqB,QAAAA,EAAAA;YAA/B,CAAb,CAAA;YAEAkC,iBAAiB,KAAA,IAAjBA,IAAAA,iBAAiB,KAAA,KAAA,CAAjBA,GAAAA,KAAAA,CAAAA,GAAAA,iBAAiB,EAAA;YACjB;UACD;QACD,KAAKG,4BAAY,CAACM,GAAlB;UAAuB;YACrB,MAAKJ,SAAL,CAAenD,QAAf,CAAwB/B,KAAxB,CAAA;YAEA,IAAIuF,QAAJ;YACA,IAAIC,WAAJ;YACA,IAAI7C,SAAJ;YAEA,IACEf,gBAAgB,KAAK,UAArBA,IACAA,gBAAgB,KAAK,mBAFvB,EAGE;cACA2D,QAAQ,GAAG5D,MAAM,CAACG,MAAlByD;cACAC,WAAW,GAAGb,WAAW,CAACc,YAA1BD;cACA7C,SAAQ,GAAGgC,WAAW,CAACS,SAAvBzC;YACD,CAPD,MAOO;cACL4C,QAAQ,GAAG5D,MAAM,CAACE,KAAlB0D;cACAC,WAAW,GAAGb,WAAW,CAACe,YAA1BF;cACA7C,SAAQ,GAAGgC,WAAW,CAACU,SAAvB1C;YACD;YAED,IAAMrB,OAAO,GACX,CAACkE,WAAW,GAAG7C,SAAQ,GAAG1B,qBAA1B,IACEgB,IAAAA,8BAAqB,EAACL,gBAAD,CADvB,GAEA2D,QAAQ,GAAG,CAFX,GAGI5C,SAAQ,KAAK,CAAbA,IAAkB6C,WAAW,KAAK,CAHtC,GAII,MAAKjE,KAAL,CAAWD,OALjB;YAOA,MAAKD,OAAL,CAAa;cAAEC,OAAF,EAAEA,OAAF;cAAWqB,QAAAA,EAAAA;YAAX,CAAb,CAAA;YAEA,IAAIrB,OAAJ,EAAa;cAGX,MAAKoC,sBAAL,GAA8BiC,UAAU,CAAC,YAAM;gBAC7C7C,OAAO,EADsC;;gBAK7C,MAAKkB,WAAL,EAAA;cACD,CANuC,EAMrC,EANqC,CAAxC;YAOD;YAEDc,YAAY,KAAA,IAAZA,IAAAA,YAAY,KAAA,KAAA,CAAZA,GAAAA,KAAAA,CAAAA,GAAAA,YAAY,EAAA;YACZ;UACD;MAAA;IAEJ,CAxPsD,CAAA;IAAA,eAAA,8CAAA,sBAAA,EA2PxBc,IAAAA,gBAAO,EACpC,UACEC,iBADF,EAEEzC,SAFF;MAAA,OAGKyC,iBAAiB,CAACzC,SAAD,CAJc;IAAA,EA3PiB,CAAA;IAAA,eAAA,8CAAA,kBAAA,EAmQ5BwC,IAAAA,gBAAO,EAChC,UACEE,kBADF,EAEEzB,OAFF,EAGE0B,IAHF,EAIEpE,MAJF,EAKEqE,QALF,EAMEC,UANF,EAOEC,WAPF,EAQEC,SARF;MAAA,OASM;QACJC,KAAK,EAAEN,kBADH;QAEJzB,OAAO,EAAE;UAAEgC,QAAQ,EAAEhC;QAAZ,CAFL;QAGJ0B,IAAI,EAAEA,IAAI,IAAI;UAAEM,QAAQ,EAAEN;QAAZ,CAHV;QAIJzE,OAAO,EAAE,MAAK0B,SAJV;QAKJsD,OAAO,EAAE,MAAKpB,SALV;QAMJlD,QAAQ,EAAE,MAAKA,QANX;QAOJuE,OAAO,EAAE;UACPC,MAAM,EAAE7E;QADD,CAPL;QAUJ8E,MAAM,EAAE;UACNC,GAAG,EAAEV,QADC;UAENW,KAAK,EAAEV,UAFD;UAGNW,MAAM,EAAEV,WAHF;UAINW,IAAI,EAAEV;QAJA;MAVJ,CATN;IAAA,CADgC,CAnQqB,CAAA;IAAA,eAAA,8CAAA,YAAA,EAgVlCtF,KAAK,CAAC0G,SAAN1G,EAhVkC,CAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAevDO,6BAAoB;MAClB,IAAA,CAAKC,OAAL,CAAa;QAAEC,OAAO,EAAE,IAAA,CAAKC,KAAL,CAAWD;MAAtB,CAAb,CAAA;MACA,IAAA,CAAKE,kBAAL,GAA0B,IAA1B;IACD;EAAA;IAAA;IAAA,OAEDC,4BAAmBC,SAAD,EAAmB;MACnC,mBAA8C,IAAA,CAAKH,KAAnD;QAAQI,MAAF,gBAAEA,MAAF;QAAUC,gBAAV,gBAAUA,gBAAV;QAA4BN,OAAAA,gBAAAA,OAAAA;MAClC,IAAQO,KAAF,GAAoBF,MAA1B,CAAQE,KAAF;QAASC,MAAAA,GAAWH,MAA1B,CAAeG,MAAAA;MAEf,IAAID,KAAK,KAAKH,SAAS,CAACC,MAAVD,CAAiBG,KAA/B,EAAsC;QACpC,IAAA,CAAKF,MAAL,CAAYE,KAAZ,CAAkBE,QAAlB,CAA2BF,KAA3B,CAAA;MACD;MAED,IAAIC,MAAM,KAAKJ,SAAS,CAACC,MAAVD,CAAiBI,MAAhC,EAAwC;QACtC,IAAA,CAAKH,MAAL,CAAYG,MAAZ,CAAmBC,QAAnB,CAA4BD,MAA5B,CAAA;MACD;MAED,IAAIF,gBAAgB,KAAKF,SAAS,CAACE,gBAAnC,EAAqD;QACnD,IAAA,CAAKI,QAAL,CAAcD,QAAd,CAAuBE,IAAAA,8BAAqB,EAACL,gBAAD,CAA5C,CAAA;MACD;MAED,IAAMM,OAAO,GAAG,IAAA,CAAKC,iBAAL,CAAuB,IAAA,CAAKZ,KAA5B,CAAhB;MAEA,IACE,IAAA,CAAKY,iBAAL,CAAuBT,SAAvB,CAAA,KAAsCQ,OAAtC,IACA,IAAA,CAAKE,WAAL,KAAqBF,OAFvB,EAGE;QAMA,IAAA,CAAKb,OAAL,CAAa;UAAEC,OAAAA,EAAAA;QAAF,CAAb,CAAA;MACD;IACF;EAAA;IAAA;IAAA,OAEDe,gCAAuB;MACrB,IAAA,CAAKd,KAAL,CAAWe,OAAX,CAAmBC,aAAnB,EAAA;MACA,IAAA,CAAKf,kBAAL,GAA0B,KAA1B;MACA,IAAA,CAAKgB,oBAAL,EAAA;IACD;EAAA;IAAA;IAAA,OAyOOsE,qCAA4B;MAClC,mBAA8D,IAAA,CAAKvF,KAAnE;QAAQI,MAAF,gBAAEA,MAAF;QAAUC,gBAAV,gBAAUA,gBAAV;QAA4BmF,uBAAAA,gBAAAA,uBAAAA;MAClC,IAAMC,8BAA8B,GAAG,IAAvC;MAEA,IAAMzB,QAAQ,GACZwB,uBAAuB,KAAKpD,SAA5BoD,GACIA,uBADJA,GAEInF,gBAAgB,KAAK,UAArBA,IACAA,gBAAgB,KAAK,mBADrBA,GAEA1B,kCAFA0B,GAGA3B,oCANN;MAQA,IAAI2B,gBAAgB,KAAK,UAAzB,EAAqC;QACnC,OAAO;UACLqF,SAAS,EAAE,EADN;UAELC,UAAU,EAAE,CAFP;UAGLC,OAAO,EAAE;YAAEP,MAAM,EAAE,CAACjF,MAAM,CAACG,MAAR,GAAiByD;UAA3B,CAHJ;UAILyB,8BAAAA,EAAAA;QAJK,CAAP;MAMD,CAPD,MAOO,IAAIpF,gBAAgB,KAAK,mBAAzB,EAA8C;QACnD,OAAO;UACLqF,SAAS,EAAE,EADN;UAELC,UAAU,EAAE,CAAC,CAFR;UAGLC,OAAO,EAAE;YAAET,GAAG,EAAE,CAAC/E,MAAM,CAACG,MAAR,GAAiByD;UAAxB,CAHJ;UAILyB,8BAAAA,EAAAA;QAJK,CAAP;MAMD,CAPM,MAOA;QACL,IAAMG,OAAO,GAAG,CAACxF,MAAM,CAACE,KAAR,GAAgB0D,QAAhC;QACA,IAAM6B,kBAAkB,GAAGnF,IAAAA,8BAAqB,EAACL,gBAAD,CAAhD;QAEA,IAAIwF,kBAAkB,KAAK,CAA3B,EAA8B;UAC5B,OAAO;YACLC,UAAU,EAAE,CADP;YAELC,SAAS,EAAE,EAFN;YAGLH,OAAO,EAAE;cAAER,KAAK,EAAEQ;YAAT,CAHJ;YAILH,8BAAAA,EAAAA;UAJK,CAAP;QAMD,CAPD,MAOO;UACL,OAAO;YACLK,UAAU,EAAE,CAAC,CADR;YAELC,SAAS,EAAE,EAFN;YAGLH,OAAO,EAAE;cAAEN,IAAI,EAAEM;YAAR,CAHJ;YAILH,8BAAAA,EAAAA;UAJK,CAAP;QAMD;MACF;IACF;EAAA;IAAA;IAAA,OAIDQ,kBAAS;MACP,mBAmBI,IAAA,CAAKjG,KAnBT;QACEsE,iBADI,gBACJA,iBADI;QAEJC,kBAFI,gBAEJA,kBAFI;QAGJzB,OAHI,gBAGJA,OAHI;QAIJ/B,OAJI,gBAIJA,OAJI;QAKJyD,IALI,gBAKJA,IALI;QAMJpE,MANI,gBAMJA,MANI;QAOJ8E,MAPI,gBAOJA,MAPI;QAQJvF,OARI,gBAQJA,OARI;QASJuG,cATI,gBASJA,cATI;QAUJ1G,aAVI,gBAUJA,aAVI;QAWJC,cAXI,gBAWJA,cAXI;QAYJY,gBAZI,gBAYJA,gBAZI;QAaJ8F,mBAbI,gBAaJA,mBAbI;QAcJC,iBAdI,gBAcJA,iBAdI;QAeJC,QAfI,gBAeJA,QAfI;QAgBYE,oBAhBZ,gBAgBJD,cAAc;QACdE,YAjBI,gBAiBJA,YAjBI;QAkBDC,IAAAA;MAGL,IAAMC,kBAAkB,GAAG,IAAA,CAAKC,gBAAL,CACzBpC,kBADyB,EAEzBzB,OAFyB,EAGzB0B,IAHyB,EAIzBpE,MAJyB,EAKzB8E,MAAM,CAACC,GALkB,EAMzBD,MAAM,CAACE,KANkB,EAOzBF,MAAM,CAACG,MAPkB,EAQzBH,MAAM,CAACI,IARkB,CAA3B;MAWA,IAAMsB,iBAAiB,GAAG,IAAA,CAAKC,oBAAL,CACxBvC,iBADwB,EAExBoC,kBAFwB,CAA1B;MAKA,IAAQJ,cAAF,GACJM,iBADF,CAAQN,cAAF;QAAkBQ,SAAlB,GACJF,iBADF,CAAwBE,SAAlB;QAA6BC,YAA7B,GACJH,iBADF,CAAmCG,YAA7B;QAA2CC,WAAAA,GAC/CJ,iBADF,CAAiDI,WAAAA;MAGjD,IAAMC,kBAAkB,GAAGxH,cAAc,GACrC,qBAAQ,CAACyH,KAAT,CACE,CACE;QACE9D,WAAW,EACT,gBAAgB,KAAK,UAArB,IACA/C,gBAAgB,KAAK,mBADrB,GAEI;UAAE6D,YAAY,EAAEnD;QAAhB,CAFJ,GAGI;UAAEoD,YAAY,EAAEpD;QAAhB;MALR,CADF,CADF,EAUE;QAAEnC,eAAAA,EAAAA;MAAF,CAVF,CADqC,GAarCwD,SAbJ;MAeA,0BAA4BlD,uBAAU,CAACC,OAAXD,CAAmBsH,YAAY,IAAI,CAAA,CAAnCtH,CAA5B;QAAQiI,eAAAA,uBAAAA,eAAAA;MACR,IAAMC,aAAa,GACjB,OAAOD,eAAP,KAA2B,QAA3B,GACIE,IAAAA,cAAK,EAACF,eAAD,CAALE,CAAuBC,KAAvBD,EAAAA,KAAmC,CADvC,GAEI,KAHN;MAKA,OACE,KAAA,CAAA,aAAA,CAAC,6BAAD,CAAsB,QAAtB,EAAA;QAA+B,KAAK,EAAEX;MAAtC,CAAA;MAII7H,qBAAQ,CAACC,EAATD,KAAgB,KAAhBA,IACAqH,cADArH,IAEA2F,IAFA3F,IAGA0I,sBAAsB,CAACjD,iBAAD,CAHtBzF,GAIE,KAAA,CAAA,aAAA,CAAC,8BAAD,EAAA;QACE,IAAI,EAAEuH,iBADR;QAEE,MAAM,EAAEhG,MAFV;QAGE,MAAM,EAAE8E,MAHV;QAIE,KAAK,EAAE4B;MAJT,CAAA,CAJFjI,GAUI,IAdR,EAgBE,KAAA,CAAA,aAAA,CAAC,qBAAD,CAAU,IAAV,EAAA;QACE,KAAK,EAAE;UAKLO,OAAO,EAAE0D;QALJ,CADT;;QASE,WAAW,EAAE;MATf,CAAA,CAhBF,EA2BE,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAA,QAAA,CAAA;QAAM,aAAa,EAAC;MAApB,CAAA,EAAmC2D,IAAnC,CAAA,EACGP,cAAc,GACb,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAA;QAAM,aAAa,EAAC,UAApB;QAA+B,KAAK,EAAEhH,uBAAU,CAACsI;MAAjD,CAAA,EACG7H,OAAO,CAAC;QAAEX,KAAK,EAAE+H;MAAT,CAAD,CADV,CADa,GAIX,IALN,EAME,KAAA,CAAA,aAAA,CAAC,qBAAD,CAAU,IAAV,EAAA;QACE,KAAK,EAAE,CAACnH,MAAM,CAAC6H,SAAR,EAAmBnB,cAAnB,EAAmCC,oBAAnC,CADT;QAEE,aAAa,EAAC;MAFhB,CAAA,EAIE,KAAA,CAAA,aAAA,CAAC,iCAAD,EAAA,QAAA,CAAA;QACE,OAAO,EAAEnG,MAAM,CAACE,KAAPF,KAAiB,CAAjBA,IAAsBX,cADjC;QAEE,cAAc,EAAEwH,kBAFlB;QAGE,oBAAoB,EAAE,IAAA,CAAKS;MAH7B,CAAA,EAIM,IAAA,CAAKnC,yBAAL,EAJN,CAAA,EAME,KAAA,CAAA,aAAA,CAAC,qBAAD,CAAU,IAAV,EAAA;QACE,8BAA8B,EAAExG,eAAe,CAAC+H,SAAD,CADjD;QAEE,KAAK,EAAE,CAAClH,MAAM,CAAC6H,SAAR,EAAmBX,SAAnB;MAFT,CAAA,EAIG,aAAa,IAAIE,WAAjB,IAAgC,CAACI,aAAjC,GACC,KAAA,CAAA,aAAA,CAAC,qBAAD,CAAU,IAAV,EAAA;QACE,KAAK,EAAE,CACLxH,MAAM,CAAC+H,MADF,EAELtH,gBAAgB,KAAK,YAArBA,GACI,CAACT,MAAM,CAACgI,gBAAR,EAA0BhI,MAAM,CAACiI,UAAjC,CADJxH,GAEIA,gBAAgB,KAAK,qBAArBA,GACA,CAACT,MAAM,CAACgI,gBAAR,EAA0BhI,MAAM,CAACkI,WAAjC,CADAzH,GAEAA,gBAAgB,KAAK,UAArBA,GACA,CAACT,MAAM,CAACmI,cAAR,EAAwBnI,MAAM,CAACoI,SAA/B,CADA3H,GAEA,CAACT,MAAM,CAACmI,cAAR,EAAwBnI,MAAM,CAACqI,YAA/B,CARC,EASL;UAAEd,eAAAA,EAAAA;QAAF,CATK,EAULH,WAVK,CADT;QAaE,aAAa,EAAC;MAbhB,CAAA,CADD,GAgBG,IApBN,EAqBE,KAAA,CAAA,aAAA,CAAC,kBAAD,EAAA;QACE,GAAG,EAAE,IAAA,CAAKnE,UADZ;QAEE,OAAO,EAAEsD,mBAFX;QAGE,MAAM,EAAE/F,MAHV;QAIE,KAAK,EAAEoG;MAJT,CAAA,EAMGH,QANH,CArBF,CANF,CAJF,CANF,CA3BF,CADF;IA+ED;EAAA;EAAA;AAAA,EA/d+B/G,KAAK,CAACC,SAAzB;AAAA;gBAAMF,I,kBACG;EACpBG,aAAa,EAAE,KADK;EAEpBC,cAAc,EAAE,IAFI;EAGpBC,qBAAqB,EAAEnB,uBAHH;EAIpBoB,OAAO,EAAE,iBAAA,KAAA,EAAA;IAAA,IACPX,KAAAA,GADO,KAAA,CACPA,KAAAA;IADO,OAKPA,KAAK,GACH,KAAA,CAAA,aAAA,CAAC,qBAAD,CAAU,IAAV,EAAA;MAAe,aAAa,EAAC,MAA7B;MAAoC,KAAK,EAAE,CAACY,MAAM,CAACD,OAAR,EAAiBX,KAAjB;IAA3C,CAAA,CADG,GAED,IAPG;EAAA;AAJW,C;AAiejB,IAAMuI,sBAAsB,GACjCW,SADWX,sBAAsB,CACjCW,qBADoC,EAEjC;EACH,OACEA,qBAAqB,KAAKC,+CAA1BD;EAEAA,qBAAqB,CAACE,IAAtBF,KAA+B,yBAHjC;AAKD,CARM;AAAA;AAUP,IAAMtI,MAAM,GAAG,uBAAU,CAACyI,MAAX,CAAkB;EAC/BZ,SAAS,EAAE;IACTa,IAAI,EAAE;EADG,CADoB;EAI/B3I,OAAO,EAAE;IACP2I,IAAI,EAAE,CADC;IAEPnB,eAAe,EAAE;EAFV,CAJsB;EAQ/BQ,MAAM,EAAE;IACNY,QAAQ,EAAE,UADJ;IAENC,YAAY,EAAE,CAFR;IAGNC,WAAW,EAAE,MAHP;IAINC,aAAa,EAAE;EAJT,CARuB;EAc/Bd,gBAAgB,EAAE;IAChBzC,GAAG,EAAE,CADW;IAEhBE,MAAM,EAAE,CAFQ;IAGhB/E,KAAK,EAAE,CAHS;IAIhBqI,YAAY,EAAE;MAAErI,KAAK,EAAE,CAAC,CAAV;MAAaC,MAAM,EAAE;IAArB;EAJE,CAda;EAoB/BsH,UAAU,EAAE;IACVvC,IAAI,EAAE;EADI,CApBmB;EAuB/BwC,WAAW,EAAE;IACX1C,KAAK,EAAE;EADI,CAvBkB;EA0B/B2C,cAAc,EAAE;IACdzC,IAAI,EAAE,CADQ;IAEdF,KAAK,EAAE,CAFO;IAGd7E,MAAM,EAAE,CAHM;IAIdoI,YAAY,EAAE;MAAErI,KAAK,EAAE,CAAT;MAAYC,MAAM,EAAE,CAAC;IAArB;EAJA,CA1Be;EAgC/ByH,SAAS,EAAE;IACT7C,GAAG,EAAE;EADI,CAhCoB;EAmC/B8C,YAAY,EAAE;IACZ5C,MAAM,EAAE;EADI;AAnCiB,CAAlB,CAAf","sourcesContent":["import Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  InteractionManager,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewProps,\n  ViewStyle,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport { forModalPresentationIOS } from '../../TransitionConfigs/CardStyleInterpolators';\nimport type {\n  GestureDirection,\n  Layout,\n  StackCardInterpolationProps,\n  StackCardStyleInterpolator,\n  TransitionSpec,\n} from '../../types';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport {\n  GestureState,\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport ModalStatusBarManager from '../ModalStatusBarManager';\nimport CardSheet from './CardSheet';\n\ntype Props = ViewProps & {\n  interpolationIndex: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  headerDarkContent: boolean | undefined;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin: () => void;\n  onGestureCanceled: () => void;\n  onGestureEnd: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: number;\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    shadowEnabled: false,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.gesture.stopAnimation();\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const { gesture, transitionSpec, onOpen, onClose, onTransition } =\n      this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    this.isClosing.setValue(closing ? TRUE : FALSE);\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.ACTIVE:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      animation: StackCardInterpolationProps\n    ) => styleInterpolator(animation)\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimation = memoize(\n    (\n      interpolationIndex: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index: interpolationIndex,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n    const enableTrackpadTwoFingerGesture = true;\n\n    const distance =\n      gestureResponseDistance !== undefined\n        ? gestureResponseDistance\n        : gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ? GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      }\n    }\n  }\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      interpolationIndex,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      headerDarkContent,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolationProps = this.getCardAnimation(\n      interpolationIndex,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      interpolationProps\n    );\n\n    const { containerStyle, cardStyle, overlayStyle, shadowStyle } =\n      interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={interpolationProps}>\n        {\n          // StatusBar messes with translucent status bar on Android\n          // So we should only enable it on iOS\n          Platform.OS === 'ios' &&\n          overlayEnabled &&\n          next &&\n          getIsModalPresentation(styleInterpolator) ? (\n            <ModalStatusBarManager\n              dark={headerDarkContent}\n              layout={layout}\n              insets={insets}\n              style={cardStyle}\n            />\n          ) : null\n        }\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View\n                needsOffscreenAlphaCompositing={hasOpacityStyle(cardStyle)}\n                style={[styles.container, cardStyle]}\n              >\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.contentRef}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nexport const getIsModalPresentation = (\n  cardStyleInterpolator: StackCardStyleInterpolator\n) => {\n  return (\n    cardStyleInterpolator === forModalPresentationIOS ||\n    // Handle custom modal presentation interpolators as well\n    cardStyleInterpolator.name === 'forModalPresentationIOS'\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}