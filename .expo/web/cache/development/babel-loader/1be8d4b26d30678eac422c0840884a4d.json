{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.baseGestureHandlerWithMonitorProps = exports.baseGestureHandlerProps = void 0;\nexports.filterConfig = filterConfig;\nexports.findNodeHandle = findNodeHandle;\nexports.scheduleFlushOperations = scheduleFlushOperations;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _reactNative = require(\"react-native\");\nvar _handlersRegistry = require(\"./handlersRegistry\");\nvar _utils = require(\"../utils\");\nvar _RNGestureHandlerModule = _interopRequireDefault(require(\"../RNGestureHandlerModule\"));\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar commonProps = ['id', 'enabled', 'shouldCancelWhenOutside', 'hitSlop', 'cancelsTouchesInView'];\nvar componentInteractionProps = ['waitFor', 'simultaneousHandlers'];\nvar baseGestureHandlerProps = [].concat(commonProps, componentInteractionProps, ['onBegan', 'onFailed', 'onCancelled', 'onActivated', 'onEnded', 'onGestureEvent', 'onHandlerStateChange']);\nexports.baseGestureHandlerProps = baseGestureHandlerProps;\nvar baseGestureHandlerWithMonitorProps = [].concat(commonProps, ['needsPointerData', 'manualActivation']);\nexports.baseGestureHandlerWithMonitorProps = baseGestureHandlerWithMonitorProps;\nfunction isConfigParam(param, name) {\n  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n}\nfunction filterConfig(props, validProps) {\n  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var filteredConfig = (0, _extends2.default)({}, defaults);\n  for (var _iterator = _createForOfIteratorHelperLoose(validProps), _step; !(_step = _iterator()).done;) {\n    var key = _step.value;\n    var value = props[key];\n    if (isConfigParam(value, key)) {\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop' && typeof value !== 'object') {\n        value = {\n          top: value,\n          left: value,\n          bottom: value,\n          right: value\n        };\n      }\n      filteredConfig[key] = value;\n    }\n  }\n  return filteredConfig;\n}\nfunction transformIntoHandlerTags(handlerIDs) {\n  handlerIDs = (0, _utils.toArray)(handlerIDs);\n  if (_reactNative.Platform.OS === 'web') {\n    return handlerIDs.map(function (_ref) {\n      var current = _ref.current;\n      return current;\n    }).filter(function (handle) {\n      return handle;\n    });\n  }\n\n  return handlerIDs.map(function (handlerID) {\n    var _handlerID$current;\n    return _handlersRegistry.handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) === null || _handlerID$current === void 0 ? void 0 : _handlerID$current.handlerTag) || -1;\n  }).filter(function (handlerTag) {\n    return handlerTag > 0;\n  });\n}\nfunction findNodeHandle(node) {\n  if (_reactNative.Platform.OS === 'web') return node;\n  return (0, _reactNative.findNodeHandle)(node);\n}\nvar scheduledFlushOperationsId = null;\nfunction scheduleFlushOperations() {\n  if (scheduledFlushOperationsId === null) {\n    scheduledFlushOperationsId = requestAnimationFrame(function () {\n      _RNGestureHandlerModule.default.flushOperations();\n      scheduledFlushOperationsId = null;\n    });\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;AAKA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAEA,IAAMA,WAAW,GAAG,CAClB,IADkB,EAElB,SAFkB,EAGlB,yBAHkB,EAIlB,SAJkB,EAKlB,sBALkB,CAApB;AAQA,IAAMC,yBAAyB,GAAG,CAAC,SAAD,EAAY,sBAAZ,CAAlC;AAEO,IAAMC,uBAAuB,aAC/BF,WADkC,EAElCC,yBAFkC,GAGrC,SAHqC,EAIrC,UAJqC,EAKrC,aALqC,EAMrC,aANqC,EAOrC,SAPqC,EAQrC,gBARqC,EASrC,sBATqC,EAAhC;AAAA;AAYA,IAAME,kCAAkC,aAC1CH,WAD6C,GAEhD,kBAFgD,EAGhD,kBAHgD,EAA3C;AAAA;AAgGP,SAASI,aAAT,CAAuBC,KAAvB,EAAuCC,IAAvC,EAAqD;EAGnD,OACED,KAAK,KAAKE,SAAV,KACCF,KAAK,KAAKG,MAAM,CAACH,KAAD,CAAhB,IACC,EAAE,gBAAiBA,KAAnB,CAFF,KAGAC,IAAI,KAAK,sBAHT,IAIAA,IAAI,KAAK,gBALX;AAOD;AAEM,SAASG,YAAT,CACLC,KADK,EAELC,UAFK,EAIL;EAAA,IADAC,QAAiC,uEAAG,EAH/B;EAKL,IAAMC,cAAc,8BAAQD,SAA5B;EACA,qDAAkBD,UAAlB,wCAA8B;IAAA,IAAnBG,GAAX;IACE,IAAIC,KAAK,GAAGL,KAAK,CAACI,GAAD,CAAjB;IACA,IAAIV,aAAa,CAACW,KAAD,EAAQD,GAAR,CAAjB,EAA+B;MAC7B,IAAIA,GAAG,KAAK,sBAAR,IAAkCA,GAAG,KAAK,SAA9C,EAAyD;QACvDC,KAAK,GAAGC,wBAAwB,CAACN,KAAK,CAACI,GAAD,CAAN,CAAhC;MACD,CAFD,MAEO,IAAIA,GAAG,KAAK,SAAR,IAAqB,OAAOC,KAAP,KAAiB,QAA1C,EAAoD;QACzDA,KAAK,GAAG;UAAEE,GAAG,EAAEF,KAAP;UAAcG,IAAI,EAAEH,KAApB;UAA2BI,MAAM,EAAEJ,KAAnC;UAA0CK,KAAK,EAAEL;QAAjD,CAAR;MACD;MACDF,cAAc,CAACC,GAAD,CAAd,GAAsBC,KAAtB;IACD;EACF;EACD,OAAOF,cAAP;AACD;AAED,SAASG,wBAAT,CAAkCK,UAAlC,EAAmD;EACjDA,UAAU,GAAGC,kBAAO,EAACD,UAAD,CAApB;EAEA,IAAIE,qBAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;IACzB,OAAOH,UAAU,CACdI,GADI,CACA;MAAA,IAAGC;MAAAA,OAAgCA,OADnC;IAAA,GAEJC,MAFI,CAEIC,gBAAD;MAAA,OAAiBA,MAFpB;IAAA,EAAP;EAGD;;EAED,OAAOP,UAAU,CACdI,GADI,CAEFI,mBAAD;IAAA;IAAA,OACEC,gCAAc,CAACD,SAAD,CAAd,2BAA6BA,SAAS,CAACH,OAAvC,uDAA6BK,mBAAmBC,UAAhD,KAA8D,CAAC,CADjE;EAAA,CAFG,EAKJL,MALI,CAKIK,oBAAD;IAAA,OAAwBA,UAAU,GAAG,CALxC;EAAA,EAAP;AAMD;AAEM,SAASC,cAAT,CACLC,IADK,EAEkE;EACvE,IAAIX,qBAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B,OAAOU,IAAP;EAC3B,OAAOC,+BAAgB,EAACD,IAAD,CAAvB;AACD;AAED,IAAIE,0BAEI,GAAG,IAFX;AAIO,SAASC,uBAAT,GAAmC;EACxC,IAAID,0BAA0B,KAAK,IAAnC,EAAyC;IACvCA,0BAA0B,GAAGE,qBAAqB,CAAC,YAAM;MACvDC,+BAAsB,CAACC,eAAvB;MAEAJ,0BAA0B,GAAG,IAA7B;IACD,CAJiD,CAAlD;EAKD;AACF","names":["commonProps","componentInteractionProps","baseGestureHandlerProps","baseGestureHandlerWithMonitorProps","isConfigParam","param","name","undefined","Object","filterConfig","props","validProps","defaults","filteredConfig","key","value","transformIntoHandlerTags","top","left","bottom","right","handlerIDs","toArray","Platform","OS","map","current","filter","handle","handlerID","handlerIDToTag","_handlerID$current","handlerTag","findNodeHandle","node","findNodeHandleRN","scheduledFlushOperationsId","scheduleFlushOperations","requestAnimationFrame","RNGestureHandlerModule","flushOperations"],"sources":["gestureHandlerCommon.ts"],"sourcesContent":["// Previous types exported gesture handlers as classes which creates an interface and variable, both named the same as class.\n// Without those types, we'd introduce breaking change, forcing users to prefix every handler type specification with typeof\n// e.g. React.createRef<TapGestureHandler> -> React.createRef<typeof TapGestureHandler>.\n// See https://www.typescriptlang.org/docs/handbook/classes.html#constructor-functions for reference.\nimport * as React from 'react';\nimport { Platform, findNodeHandle as findNodeHandleRN } from 'react-native';\n\nimport { State } from '../State';\nimport { TouchEventType } from '../TouchEventType';\nimport { ValueOf } from '../typeUtils';\nimport { handlerIDToTag } from './handlersRegistry';\nimport { toArray } from '../utils';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\n\nconst commonProps = [\n  'id',\n  'enabled',\n  'shouldCancelWhenOutside',\n  'hitSlop',\n  'cancelsTouchesInView',\n] as const;\n\nconst componentInteractionProps = ['waitFor', 'simultaneousHandlers'] as const;\n\nexport const baseGestureHandlerProps = [\n  ...commonProps,\n  ...componentInteractionProps,\n  'onBegan',\n  'onFailed',\n  'onCancelled',\n  'onActivated',\n  'onEnded',\n  'onGestureEvent',\n  'onHandlerStateChange',\n] as const;\n\nexport const baseGestureHandlerWithMonitorProps = [\n  ...commonProps,\n  'needsPointerData',\n  'manualActivation',\n];\n\nexport interface GestureEventPayload {\n  handlerTag: number;\n  numberOfPointers: number;\n  state: ValueOf<typeof State>;\n}\nexport interface HandlerStateChangeEventPayload extends GestureEventPayload {\n  oldState: ValueOf<typeof State>;\n}\n\nexport type HitSlop =\n  | number\n  | Partial<\n      Record<\n        'left' | 'right' | 'top' | 'bottom' | 'vertical' | 'horizontal',\n        number\n      >\n    >\n  | Record<'width' | 'left', number>\n  | Record<'width' | 'right', number>\n  | Record<'height' | 'top', number>\n  | Record<'height' | 'bottom', number>;\n\n//TODO(TS) events in handlers\n\nexport interface GestureEvent<ExtraEventPayloadT = Record<string, unknown>> {\n  nativeEvent: Readonly<GestureEventPayload & ExtraEventPayloadT>;\n}\nexport interface HandlerStateChangeEvent<\n  ExtraEventPayloadT = Record<string, unknown>\n> {\n  nativeEvent: Readonly<HandlerStateChangeEventPayload & ExtraEventPayloadT>;\n}\n\nexport type TouchData = {\n  id: number;\n  x: number;\n  y: number;\n  absoluteX: number;\n  absoluteY: number;\n};\n\nexport type GestureTouchEvent = {\n  handlerTag: number;\n  numberOfTouches: number;\n  state: ValueOf<typeof State>;\n  eventType: TouchEventType;\n  allTouches: TouchData[];\n  changedTouches: TouchData[];\n};\n\nexport type GestureUpdateEvent<\n  GestureEventPayloadT = Record<string, unknown>\n> = GestureEventPayload & GestureEventPayloadT;\n\nexport type GestureStateChangeEvent<\n  GestureStateChangeEventPayloadT = Record<string, unknown>\n> = HandlerStateChangeEventPayload & GestureStateChangeEventPayloadT;\n\nexport type CommonGestureConfig = {\n  enabled?: boolean;\n  shouldCancelWhenOutside?: boolean;\n  hitSlop?: HitSlop;\n};\n\n// Events payloads are types instead of interfaces due to TS limitation.\n// See https://github.com/microsoft/TypeScript/issues/15300 for more info.\nexport type BaseGestureHandlerProps<\n  ExtraEventPayloadT extends Record<string, unknown> = Record<string, unknown>\n> = CommonGestureConfig & {\n  id?: string;\n  waitFor?: React.Ref<unknown> | React.Ref<unknown>[];\n  simultaneousHandlers?: React.Ref<unknown> | React.Ref<unknown>[];\n  testID?: string;\n  cancelsTouchesInView?: boolean;\n  // TODO(TS) - fix event types\n  onBegan?: (event: HandlerStateChangeEvent) => void;\n  onFailed?: (event: HandlerStateChangeEvent) => void;\n  onCancelled?: (event: HandlerStateChangeEvent) => void;\n  onActivated?: (event: HandlerStateChangeEvent) => void;\n  onEnded?: (event: HandlerStateChangeEvent) => void;\n\n  //TODO(TS) consider using NativeSyntheticEvent\n  onGestureEvent?: (event: GestureEvent<ExtraEventPayloadT>) => void;\n  onHandlerStateChange?: (\n    event: HandlerStateChangeEvent<ExtraEventPayloadT>\n  ) => void;\n  // implicit `children` prop has been removed in @types/react^18.0.0\n  children?: React.ReactNode;\n};\n\nfunction isConfigParam(param: unknown, name: string) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) ||\n      !('__isNative' in (param as Record<string, unknown>))) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nexport function filterConfig(\n  props: Record<string, unknown>,\n  validProps: string[],\n  defaults: Record<string, unknown> = {}\n) {\n  const filteredConfig = { ...defaults };\n  for (const key of validProps) {\n    let value = props[key];\n    if (isConfigParam(value, key)) {\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop' && typeof value !== 'object') {\n        value = { top: value, left: value, bottom: value, right: value };\n      }\n      filteredConfig[key] = value;\n    }\n  }\n  return filteredConfig;\n}\n\nfunction transformIntoHandlerTags(handlerIDs: any) {\n  handlerIDs = toArray(handlerIDs);\n\n  if (Platform.OS === 'web') {\n    return handlerIDs\n      .map(({ current }: { current: any }) => current)\n      .filter((handle: any) => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      (handlerID: any) =>\n        handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1\n    )\n    .filter((handlerTag: number) => handlerTag > 0);\n}\n\nexport function findNodeHandle(\n  node: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number | React.Component<any, any> | React.ComponentClass<any> {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nlet scheduledFlushOperationsId: ReturnType<\n  typeof requestAnimationFrame\n> | null = null;\n\nexport function scheduleFlushOperations() {\n  if (scheduledFlushOperationsId === null) {\n    scheduledFlushOperationsId = requestAnimationFrame(() => {\n      RNGestureHandlerModule.flushOperations();\n\n      scheduledFlushOperationsId = null;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}