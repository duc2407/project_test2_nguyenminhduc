{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  configure: true,\n  fetch: true,\n  refresh: true,\n  addEventListener: true,\n  useNetInfo: true\n};\nexports.addEventListener = addEventListener;\nexports.configure = configure;\nexports.default = void 0;\nexports.fetch = fetch;\nexports.refresh = refresh;\nexports.useNetInfo = useNetInfo;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _react = require(\"react\");\nvar _reactNative = require(\"react-native\");\nvar _defaultConfiguration = _interopRequireDefault(require(\"./internal/defaultConfiguration\"));\nvar _nativeInterface = _interopRequireDefault(require(\"./internal/nativeInterface\"));\nvar _state2 = _interopRequireDefault(require(\"./internal/state\"));\nvar Types = _interopRequireWildcard(require(\"./internal/types\"));\nObject.keys(Types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === Types[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return Types[key];\n    }\n  });\n});\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar _configuration = _defaultConfiguration.default;\n\nvar _state = null;\nvar createState = function createState() {\n  return new _state2.default(_configuration);\n};\n\nfunction configure(configuration) {\n  _configuration = (0, _extends2.default)({}, _defaultConfiguration.default, configuration);\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n  if (_reactNative.Platform.OS === 'ios') {\n    _nativeInterface.default.configure(configuration);\n  }\n}\n\nfunction fetch(requestedInterface) {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\nfunction refresh() {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state._fetchCurrentState();\n}\n\nfunction addEventListener(listener) {\n  if (!_state) {\n    _state = createState();\n  }\n  _state.add(listener);\n  return function () {\n    _state && _state.remove(listener);\n  };\n}\n\nfunction useNetInfo(configuration) {\n  if (configuration) {\n    configure(configuration);\n  }\n  var _useState = (0, _react.useState)({\n      type: Types.NetInfoStateType.unknown,\n      isConnected: null,\n      isInternetReachable: null,\n      details: null\n    }),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    netInfo = _useState2[0],\n    setNetInfo = _useState2[1];\n  (0, _react.useEffect)(function () {\n    return addEventListener(setNetInfo);\n  }, []);\n  return netInfo;\n}\nvar _default = {\n  configure: configure,\n  fetch: fetch,\n  refresh: refresh,\n  addEventListener: addEventListener,\n  useNetInfo: useNetInfo\n};\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AAkHA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;AAAA;AAAA;;AA/GA,IAAIA,cAAc,GAAGC,6BAArB;;AAGA,IAAIC,MAAoB,GAAG,IAA3B;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAW,GAAgB;EAC/B,OAAO,IAAIC,eAAJ,CAAUJ,cAAV,CAAP;AACD,CAFD;;AAWO,SAASK,SAAT,CACLC,aADK,EAEC;EACNN,cAAc,8BACTC,6BADY,EAEZK,cAFL;EAKA,IAAIJ,MAAJ,EAAY;IACVA,MAAM,CAACK,QAAP;IACAL,MAAM,GAAGC,WAAW,EAApB;EACD;EAED,IAAIK,qBAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;IACzBC,wBAAe,CAACL,SAAhB,CAA0BC,aAA1B;EACD;AACF;;AASM,SAASK,KAAT,CACLC,kBADK,EAEwB;EAC7B,IAAI,CAACV,MAAL,EAAa;IACXA,MAAM,GAAGC,WAAW,EAApB;EACD;EACD,OAAOD,MAAM,CAACW,MAAP,CAAcD,kBAAd,CAAP;AACD;;AAOM,SAASE,OAAT,GAAgD;EACrD,IAAI,CAACZ,MAAL,EAAa;IACXA,MAAM,GAAGC,WAAW,EAApB;EACD;EACD,OAAOD,MAAM,CAACa,kBAAP,EAAP;AACD;;AAaM,SAASC,gBAAT,CACLC,QADK,EAEsB;EAC3B,IAAI,CAACf,MAAL,EAAa;IACXA,MAAM,GAAGC,WAAW,EAApB;EACD;EAEDD,MAAM,CAACgB,GAAP,CAAWD,QAAX;EACA,OAAO,YAAY;IACjBf,MAAM,IAAIA,MAAM,CAACiB,MAAP,CAAcF,QAAd,CAAV;EACD,CAFD;AAGD;;AAOM,SAASG,UAAT,CACLd,aADK,EAEe;EACpB,IAAIA,aAAJ,EAAmB;IACjBD,SAAS,CAACC,aAAD,CAAT;EACD;EAED,gBAA8Be,mBAAQ,EAAqB;MACzDC,IAAI,EAAEC,KAAK,CAACC,gBAAN,CAAuBC,OAD4B;MAEzDC,WAAW,EAAE,IAF4C;MAGzDC,mBAAmB,EAAE,IAHoC;MAIzDC,OAAO,EAAE;IAJgD,CAArB,CAAtC;IAAA;IAAOC,OAAD;IAAUC,UAAV;EAONC,oBAAS,EAAC,YAAoB;IAC5B,OAAOf,gBAAgB,CAACc,UAAD,CAAvB;EACD,CAFQ,EAEN,EAFM,CAAT;EAIA,OAAOD,OAAP;AACD;AAAA,eAIc;EACbxB,SADa,EACbA,SADa;EAEbM,KAFa,EAEbA,KAFa;EAGbG,OAHa,EAGbA,OAHa;EAIbE,gBAJa,EAIbA,gBAJa;EAKbI;AALa,CAAf;AAAA","names":["_configuration","DEFAULT_CONFIGURATION","_state","createState","State","configure","configuration","tearDown","Platform","OS","NativeInterface","fetch","requestedInterface","latest","refresh","_fetchCurrentState","addEventListener","listener","add","remove","useNetInfo","useState","type","Types","NetInfoStateType","unknown","isConnected","isInternetReachable","details","netInfo","setNetInfo","useEffect"],"sources":["index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect} from 'react';\nimport {Platform} from 'react-native';\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport NativeInterface from './internal/nativeInterface';\nimport State from './internal/state';\nimport * as Types from './internal/types';\n\n// Stores the currently used configuration\nlet _configuration = DEFAULT_CONFIGURATION;\n\n// Stores the singleton reference to the state manager\nlet _state: State | null = null;\nconst createState = (): State => {\n  return new State(_configuration);\n};\n\n/**\n * Configures the library with the given configuration. Note that calling this will stop all\n * previously added listeners from being called again. It is best to call this right when your\n * application is started to avoid issues.\n *\n * @param configuration The new configuration to set.\n */\nexport function configure(\n  configuration: Partial<Types.NetInfoConfiguration>,\n): void {\n  _configuration = {\n    ...DEFAULT_CONFIGURATION,\n    ...configuration,\n  };\n\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n\n  if (Platform.OS === 'ios') {\n    NativeInterface.configure(configuration);\n  }\n}\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n *\n * @param [requestedInterface] interface from which to obtain the information\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(\n  requestedInterface?: string,\n): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\n/**\n * Force-refreshes the internal state of the NetInfo library.\n *\n * @returns A Promise which contains the updated connection state.\n */\nexport function refresh(): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state._fetchCurrentState();\n}\n\n/**\n * Subscribe to connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns A function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n  return (): void => {\n    _state && _state.remove(listener);\n  };\n}\n\n/**\n * A React Hook which updates when the connection state changes.\n *\n * @returns The connection state.\n */\nexport function useNetInfo(\n  configuration?: Partial<Types.NetInfoConfiguration>,\n): Types.NetInfoState {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    return addEventListener(setNetInfo);\n  }, []);\n\n  return netInfo;\n}\n\nexport * from './internal/types';\n\nexport default {\n  configure,\n  fetch,\n  refresh,\n  addEventListener,\n  useNetInfo,\n};\n"]},"metadata":{},"sourceType":"script"}