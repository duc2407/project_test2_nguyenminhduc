{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _elements = require(\"@react-navigation/elements\");\nvar _native = require(\"@react-navigation/native\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _ModalPresentationContext = _interopRequireDefault(require(\"../../utils/ModalPresentationContext\"));\nvar _useKeyboardManager2 = _interopRequireDefault(require(\"../../utils/useKeyboardManager\"));\nvar _Card = _interopRequireDefault(require(\"./Card\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar EPSILON = 0.1;\nfunction CardContainer(_ref) {\n  var interpolationIndex = _ref.interpolationIndex,\n    index = _ref.index,\n    active = _ref.active,\n    closing = _ref.closing,\n    gesture = _ref.gesture,\n    focused = _ref.focused,\n    modal = _ref.modal,\n    getPreviousScene = _ref.getPreviousScene,\n    getFocusedRoute = _ref.getFocusedRoute,\n    headerDarkContent = _ref.headerDarkContent,\n    hasAbsoluteFloatHeader = _ref.hasAbsoluteFloatHeader,\n    headerHeight = _ref.headerHeight,\n    onHeaderHeightChange = _ref.onHeaderHeightChange,\n    isParentHeaderShown = _ref.isParentHeaderShown,\n    isNextScreenTransparent = _ref.isNextScreenTransparent,\n    detachCurrentScreen = _ref.detachCurrentScreen,\n    layout = _ref.layout,\n    onCloseRoute = _ref.onCloseRoute,\n    onOpenRoute = _ref.onOpenRoute,\n    onGestureCancel = _ref.onGestureCancel,\n    onGestureEnd = _ref.onGestureEnd,\n    onGestureStart = _ref.onGestureStart,\n    onTransitionEnd = _ref.onTransitionEnd,\n    onTransitionStart = _ref.onTransitionStart,\n    renderHeader = _ref.renderHeader,\n    renderScene = _ref.renderScene,\n    safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n    safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n    safeAreaInsetRight = _ref.safeAreaInsetRight,\n    safeAreaInsetTop = _ref.safeAreaInsetTop,\n    scene = _ref.scene;\n  var parentHeaderHeight = React.useContext(_elements.HeaderHeightContext);\n  var _useKeyboardManager = (0, _useKeyboardManager2.default)(React.useCallback(function () {\n      var _scene$descriptor = scene.descriptor,\n        options = _scene$descriptor.options,\n        navigation = _scene$descriptor.navigation;\n      return navigation.isFocused() && options.keyboardHandlingEnabled !== false;\n    }, [scene.descriptor])),\n    onPageChangeStart = _useKeyboardManager.onPageChangeStart,\n    onPageChangeCancel = _useKeyboardManager.onPageChangeCancel,\n    onPageChangeConfirm = _useKeyboardManager.onPageChangeConfirm;\n  var handleOpen = function handleOpen() {\n    var route = scene.descriptor.route;\n    onTransitionEnd({\n      route: route\n    }, false);\n    onOpenRoute({\n      route: route\n    });\n  };\n  var handleClose = function handleClose() {\n    var route = scene.descriptor.route;\n    onTransitionEnd({\n      route: route\n    }, true);\n    onCloseRoute({\n      route: route\n    });\n  };\n  var handleGestureBegin = function handleGestureBegin() {\n    var route = scene.descriptor.route;\n    onPageChangeStart();\n    onGestureStart({\n      route: route\n    });\n  };\n  var handleGestureCanceled = function handleGestureCanceled() {\n    var route = scene.descriptor.route;\n    onPageChangeCancel();\n    onGestureCancel({\n      route: route\n    });\n  };\n  var handleGestureEnd = function handleGestureEnd() {\n    var route = scene.descriptor.route;\n    onGestureEnd({\n      route: route\n    });\n  };\n  var handleTransition = function handleTransition(_ref2) {\n    var closing = _ref2.closing,\n      gesture = _ref2.gesture;\n    var route = scene.descriptor.route;\n    if (!gesture) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: route\n    }, closing);\n  };\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n  var _useTheme = (0, _native.useTheme)(),\n    colors = _useTheme.colors;\n  var _React$useState = React.useState('box-none'),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    pointerEvents = _React$useState2[0],\n    setPointerEvents = _React$useState2[1];\n  React.useEffect(function () {\n    var _scene$progress$next, _scene$progress$next$;\n    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  var _scene$descriptor$opt = scene.descriptor.options,\n    presentation = _scene$descriptor$opt.presentation,\n    animationEnabled = _scene$descriptor$opt.animationEnabled,\n    cardOverlay = _scene$descriptor$opt.cardOverlay,\n    cardOverlayEnabled = _scene$descriptor$opt.cardOverlayEnabled,\n    cardShadowEnabled = _scene$descriptor$opt.cardShadowEnabled,\n    cardStyle = _scene$descriptor$opt.cardStyle,\n    cardStyleInterpolator = _scene$descriptor$opt.cardStyleInterpolator,\n    gestureDirection = _scene$descriptor$opt.gestureDirection,\n    gestureEnabled = _scene$descriptor$opt.gestureEnabled,\n    gestureResponseDistance = _scene$descriptor$opt.gestureResponseDistance,\n    gestureVelocityImpact = _scene$descriptor$opt.gestureVelocityImpact,\n    headerMode = _scene$descriptor$opt.headerMode,\n    headerShown = _scene$descriptor$opt.headerShown,\n    transitionSpec = _scene$descriptor$opt.transitionSpec;\n  var previousScene = getPreviousScene({\n    route: scene.descriptor.route\n  });\n  var backTitle;\n  if (previousScene) {\n    var _previousScene$descri = previousScene.descriptor,\n      options = _previousScene$descri.options,\n      route = _previousScene$descri.route;\n    backTitle = (0, _elements.getHeaderTitle)(options, route.name);\n  }\n  var headerBack = React.useMemo(function () {\n    return backTitle !== undefined ? {\n      title: backTitle\n    } : undefined;\n  }, [backTitle]);\n  return React.createElement(_Card.default, {\n    interpolationIndex: interpolationIndex,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: index === 0 ? false : gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode !== 'float' && presentation !== 'modal',\n    headerDarkContent: headerDarkContent,\n    containerStyle: hasAbsoluteFloatHeader && headerMode !== 'screen' ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: presentation === 'transparentModal' ? 'transparent' : colors.background\n    }, cardStyle],\n    style: [{\n      overflow: active ? undefined : 'hidden',\n      display:\n      animationEnabled === false && isNextScreenTransparent === false && detachCurrentScreen !== false && !focused ? 'none' : 'flex'\n    }, _reactNative.StyleSheet.absoluteFill]\n  }, React.createElement(_reactNative.View, {\n    style: styles.container\n  }, React.createElement(_ModalPresentationContext.default.Provider, {\n    value: modal\n  }, React.createElement(_reactNative.View, {\n    style: styles.scene\n  }, React.createElement(_elements.HeaderBackContext.Provider, {\n    value: headerBack\n  }, React.createElement(_elements.HeaderShownContext.Provider, {\n    value: isParentHeaderShown || headerShown !== false\n  }, React.createElement(_elements.HeaderHeightContext.Provider, {\n    value: headerShown ? headerHeight : parentHeaderHeight !== null && parentHeaderHeight !== void 0 ? parentHeaderHeight : 0\n  }, renderScene({\n    route: scene.descriptor.route\n  }))))), headerMode !== 'float' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    scenes: [previousScene, scene],\n    getPreviousScene: getPreviousScene,\n    getFocusedRoute: getFocusedRoute,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null)));\n}\nvar _default = React.memo(CardContainer);\nexports.default = _default;\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["EPSILON","CardContainer","interpolationIndex","_ref","index","active","closing","gesture","focused","modal","getPreviousScene","getFocusedRoute","headerDarkContent","hasAbsoluteFloatHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","isNextScreenTransparent","detachCurrentScreen","layout","onCloseRoute","onOpenRoute","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","parentHeaderHeight","React","useContext","HeaderHeightContext","useKeyboardManager","useCallback","descriptor","options","navigation","isFocused","keyboardHandlingEnabled","onPageChangeStart","onPageChangeCancel","onPageChangeConfirm","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","_ref2","insets","top","right","bottom","left","useTheme","colors","useState","pointerEvents","setPointerEvents","useEffect","listener","progress","next","_scene$progress$next","addListener","_scene$progress$next$","value","_ref3","removeListener","presentation","animationEnabled","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","headerMode","headerShown","transitionSpec","previousScene","backTitle","getHeaderTitle","name","headerBack","useMemo","undefined","title","Card","current","onOpen","onClose","overlay","overlayEnabled","shadowEnabled","onTransition","onGestureBegin","onGestureCanceled","styleInterpolator","accessibilityElementsHidden","importantForAccessibility","pageOverflowEnabled","containerStyle","marginTop","contentStyle","backgroundColor","background","style","overflow","display","StyleSheet","absoluteFill","View","styles","container","ModalPresentationContext","Provider","HeaderBackContext","HeaderShownContext","mode","scenes","onContentHeightChange","memo","create","flex","flexDirection"],"sources":["CardContainer.tsx"],"sourcesContent":["import {\n  getHeaderTitle,\n  HeaderBackContext,\n  HeaderHeightContext,\n  HeaderShownContext,\n} from '@react-navigation/elements';\nimport { Route, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\n\nimport type { Layout, Scene } from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport useKeyboardManager from '../../utils/useKeyboardManager';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\n\ntype Props = {\n  interpolationIndex: number;\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  modal: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene;\n  headerDarkContent: boolean | undefined;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  hasAbsoluteFloatHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n  isNextScreenTransparent: boolean;\n  detachCurrentScreen: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  interpolationIndex,\n  index,\n  active,\n  closing,\n  gesture,\n  focused,\n  modal,\n  getPreviousScene,\n  getFocusedRoute,\n  headerDarkContent,\n  hasAbsoluteFloatHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  isNextScreenTransparent,\n  detachCurrentScreen,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n}: Props) {\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const { onPageChangeStart, onPageChangeCancel, onPageChangeConfirm } =\n    useKeyboardManager(\n      React.useCallback(() => {\n        const { options, navigation } = scene.descriptor;\n\n        return (\n          navigation.isFocused() && options.keyboardHandlingEnabled !== false\n        );\n      }, [scene.descriptor])\n    );\n\n  const handleOpen = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeStart();\n    onGestureStart({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeCancel();\n    onGestureCancel({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene.descriptor;\n\n    onGestureEnd({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene.descriptor;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const {\n    presentation,\n    animationEnabled,\n    cardOverlay,\n    cardOverlayEnabled,\n    cardShadowEnabled,\n    cardStyle,\n    cardStyleInterpolator,\n    gestureDirection,\n    gestureEnabled,\n    gestureResponseDistance,\n    gestureVelocityImpact,\n    headerMode,\n    headerShown,\n    transitionSpec,\n  } = scene.descriptor.options;\n\n  const previousScene = getPreviousScene({ route: scene.descriptor.route });\n\n  let backTitle: string | undefined;\n\n  if (previousScene) {\n    const { options, route } = previousScene.descriptor;\n\n    backTitle = getHeaderTitle(options, route.name);\n  }\n\n  const headerBack = React.useMemo(\n    () => (backTitle !== undefined ? { title: backTitle } : undefined),\n    [backTitle]\n  );\n\n  return (\n    <Card\n      interpolationIndex={interpolationIndex}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={index === 0 ? false : gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode !== 'float' && presentation !== 'modal'}\n      headerDarkContent={headerDarkContent}\n      containerStyle={\n        hasAbsoluteFloatHeader && headerMode !== 'screen'\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[\n        {\n          backgroundColor:\n            presentation === 'transparentModal'\n              ? 'transparent'\n              : colors.background,\n        },\n        cardStyle,\n      ]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n          display:\n            // Hide unfocused screens when animation isn't enabled\n            // This is also necessary for a11y on web\n            animationEnabled === false &&\n            isNextScreenTransparent === false &&\n            detachCurrentScreen !== false &&\n            !focused\n              ? 'none'\n              : 'flex',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <ModalPresentationContext.Provider value={modal}>\n          <View style={styles.scene}>\n            <HeaderBackContext.Provider value={headerBack}>\n              <HeaderShownContext.Provider\n                value={isParentHeaderShown || headerShown !== false}\n              >\n                <HeaderHeightContext.Provider\n                  value={headerShown ? headerHeight : parentHeaderHeight ?? 0}\n                >\n                  {renderScene({ route: scene.descriptor.route })}\n                </HeaderHeightContext.Provider>\n              </HeaderShownContext.Provider>\n            </HeaderBackContext.Provider>\n          </View>\n          {headerMode !== 'float'\n            ? renderHeader({\n                mode: 'screen',\n                layout,\n                scenes: [previousScene, scene],\n                getPreviousScene,\n                getFocusedRoute,\n                onContentHeightChange: onHeaderHeightChange,\n              })\n            : null}\n        </ModalPresentationContext.Provider>\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}