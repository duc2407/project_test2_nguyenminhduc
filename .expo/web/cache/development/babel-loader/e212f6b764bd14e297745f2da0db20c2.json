{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createNativeWrapper;\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _NativeViewGestureHandler = require(\"./NativeViewGestureHandler\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nvar NATIVE_WRAPPER_PROPS_FILTER = [].concat((0, _toConsumableArray2.default)(_NativeViewGestureHandler.nativeViewProps), ['onGestureHandlerEvent', 'onGestureHandlerStateChange']);\nfunction createNativeWrapper(Component) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _Component$render;\n  var ComponentWrapper = React.forwardRef(function (props, ref) {\n    var gestureHandlerProps = Object.keys(props).reduce(function (res, key) {\n      var allowedKeys = NATIVE_WRAPPER_PROPS_FILTER;\n      if (allowedKeys.includes(key)) {\n        res[key] = props[key];\n      }\n      return res;\n    }, (0, _extends3.default)({}, config));\n    var _ref = (0, React.useRef)();\n    var _gestureHandlerRef = (0, React.useRef)();\n    (0, React.useImperativeHandle)(ref,\n    function () {\n      var node = _gestureHandlerRef.current;\n\n      if (_ref.current && node) {\n        _ref.current.handlerTag = node.handlerTag;\n        return _ref.current;\n      }\n      return null;\n    }, [_ref, _gestureHandlerRef]);\n    return React.createElement(_NativeViewGestureHandler.NativeViewGestureHandler, _extends({}, gestureHandlerProps, {\n      ref: _gestureHandlerRef\n    }), React.createElement(Component, _extends({}, props, {\n      ref: _ref\n    })));\n  });\n\n  ComponentWrapper.displayName = (Component === null || Component === void 0 ? void 0 : Component.displayName) || (\n  Component === null || Component === void 0 ? void 0 : (_Component$render = Component.render) === null || _Component$render === void 0 ? void 0 : _Component$render.name) || typeof Component === 'string' && Component || 'ComponentWrapper';\n  return ComponentWrapper;\n}","map":{"version":3,"mappings":";;;;;;;AAAA;AAGA;AAAA;AAAA;;;;;;;;;;;;;;;;AAaA,IAAMA,2BAA2B,8CAC5BC,yCAD+B,IAElC,uBAFkC,EAGlC,6BAHkC,EAApC;AAMe,SAASC,mBAAT,CACbC,SADa,EAGb;EAAA,IADAC,MAA+C,uEAAG,EAFrC;EAGb;EACA,IAAMC,gBAAgB,GAAGC,KAAK,CAACC,UAAN,CAGvB,UAACC,KAAD,EAAQC,GAAR,EAAgB;IAEhB,IAAMC,mBAAmB,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,MAAnB,CAC1B,UAACC,GAAD,EAAMC,GAAN,EAAc;MAEZ,IAAMC,WAA8B,GAAGhB,2BAAvC;MACA,IAAIgB,WAAW,CAACC,QAAZ,CAAqBF,GAArB,CAAJ,EAA+B;QAE7BD,GAAG,CAACC,GAAD,CAAH,GAAWP,KAAK,CAACO,GAAD,CAAhB;MACD;MACD,OAAOD,GAAP;IACD,CATyB,6BAUrBV,QAVP;IAYA,IAAMc,IAAI,GAAGC,gBAAM,GAAnB;IACA,IAAMC,kBAAkB,GAAGD,gBAAM,GAAjC;IACAE,6BAAmB,EACjBZ,GADiB;IAGjB,YAAM;MACJ,IAAMa,IAAI,GAAGF,kBAAkB,CAACG,OAAhC;;MAEA,IAAIL,IAAI,CAACK,OAAL,IAAgBD,IAApB,EAA0B;QAExBJ,IAAI,CAACK,OAAL,CAAaC,UAAb,GAA0BF,IAAI,CAACE,UAA/B;QACA,OAAON,IAAI,CAACK,OAAZ;MACD;MACD,OAAO,IAAP;IACD,CAZgB,EAajB,CAACL,IAAD,EAAOE,kBAAP,CAbiB,CAAnB;IAeA,OACEd,oBAACmB,kDAAD,eACMf,mBADN;MAGED,GAAG,EAAEW;IAHP,IAIEd,oBAACH,SAAD,eAAeK,KAAf;MAAsBC,GAAG,EAAES;IAA3B,GAJF,CADF;EAQD,CA1CwB,CAAzB;;EA6CAb,gBAAgB,CAACqB,WAAjB,GACE,UAAS,SAAT,aAAS,WAAT,qBAAS,CAAEA,WAAX;EAEAvB,SAFA,aAEAA,SAFA,4CAEAA,SAAS,CAAEwB,MAFX,sDAEAC,kBAAmBC,IAFnB,KAGC,OAAO1B,SAAP,KAAqB,QAArB,IAAiCA,SAHlC,IAIA,kBALF;EAOA,OAAOE,gBAAP;AACD","names":["NATIVE_WRAPPER_PROPS_FILTER","nativeViewProps","createNativeWrapper","Component","config","ComponentWrapper","React","forwardRef","props","ref","gestureHandlerProps","Object","keys","reduce","res","key","allowedKeys","includes","_ref","useRef","_gestureHandlerRef","useImperativeHandle","node","current","handlerTag","NativeViewGestureHandler","displayName","render","_Component$render","name"],"sources":["createNativeWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useImperativeHandle, useRef } from 'react';\n\nimport {\n  NativeViewGestureHandler,\n  NativeViewGestureHandlerProps,\n  nativeViewProps,\n} from './NativeViewGestureHandler';\n\n/*\n * This array should consist of:\n *   - All keys in propTypes from NativeGestureHandler\n *     (and all keys in GestureHandlerPropTypes)\n *   - 'onGestureHandlerEvent'\n *   - 'onGestureHandlerStateChange'\n */\nconst NATIVE_WRAPPER_PROPS_FILTER = [\n  ...nativeViewProps,\n  'onGestureHandlerEvent',\n  'onGestureHandlerStateChange',\n] as const;\n\nexport default function createNativeWrapper<P>(\n  Component: React.ComponentType<P>,\n  config: Readonly<NativeViewGestureHandlerProps> = {}\n) {\n  const ComponentWrapper = React.forwardRef<\n    React.ComponentType<any>,\n    P & NativeViewGestureHandlerProps\n  >((props, ref) => {\n    // filter out props that should be passed to gesture handler wrapper\n    const gestureHandlerProps = Object.keys(props).reduce(\n      (res, key) => {\n        // TS being overly protective with it's types, see https://github.com/microsoft/TypeScript/issues/26255#issuecomment-458013731 for more info\n        const allowedKeys: readonly string[] = NATIVE_WRAPPER_PROPS_FILTER;\n        if (allowedKeys.includes(key)) {\n          // @ts-ignore FIXME(TS)\n          res[key] = props[key];\n        }\n        return res;\n      },\n      { ...config } // watch out not to modify config\n    );\n    const _ref = useRef<React.ComponentType<P>>();\n    const _gestureHandlerRef = useRef<React.ComponentType<P>>();\n    useImperativeHandle(\n      ref,\n      // @ts-ignore TODO(TS) decide how nulls work in this context\n      () => {\n        const node = _gestureHandlerRef.current;\n        // add handlerTag for relations config\n        if (_ref.current && node) {\n          // @ts-ignore FIXME(TS) think about createHandler return type\n          _ref.current.handlerTag = node.handlerTag;\n          return _ref.current;\n        }\n        return null;\n      },\n      [_ref, _gestureHandlerRef]\n    );\n    return (\n      <NativeViewGestureHandler\n        {...gestureHandlerProps}\n        // @ts-ignore TODO(TS)\n        ref={_gestureHandlerRef}>\n        <Component {...props} ref={_ref} />\n      </NativeViewGestureHandler>\n    );\n  });\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  ComponentWrapper.displayName =\n    Component?.displayName ||\n    // @ts-ignore if render doesn't exist it will return undefined and go further\n    Component?.render?.name ||\n    (typeof Component === 'string' && Component) ||\n    'ComponentWrapper';\n\n  return ComponentWrapper;\n}\n"]},"metadata":{},"sourceType":"script"}