{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GestureStateManager = void 0;\nvar _reanimatedWrapper = require(\"./reanimatedWrapper\");\nvar _State = require(\"../../State\");\nvar _utils = require(\"../../utils\");\nvar warningMessage = (0, _utils.tagMessage)('react-native-reanimated is required in order to use synchronous state management');\n\nvar REANIMATED_AVAILABLE = (_reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : _reanimatedWrapper.Reanimated.useSharedValue) !== undefined;\nvar setGestureState = _reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : _reanimatedWrapper.Reanimated.setGestureState;\nvar GestureStateManager = {\n  create: function create(handlerTag) {\n    'worklet';\n\n    return {\n      begin: function begin() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, _State.State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      activate: function activate() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, _State.State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      fail: function fail() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, _State.State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      end: function end() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, _State.State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      }\n    };\n  }\n};\nexports.GestureStateManager = GestureStateManager;","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["warningMessage","tagMessage","REANIMATED_AVAILABLE","useSharedValue","undefined","setGestureState","Reanimated","GestureStateManager","create","handlerTag","begin","State","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END"],"mappings":";;;;AAAA;AACA;AACA;AASA,IAAMA,cAAc,GAAGC,IAAAA,iBAAU,EAC/B,kFAD+B,CAAjC;;AAMA,IAAMC,oBAAoB,GAAG,CAAA,6BAAU,KAAA,IAAV,IAAA,6BAAU,KAAA,KAAA,CAAV,GAAA,KAAA,CAAA,GAAA,6BAAU,CAAEC,cAAZ,MAA+BC,SAA5D;AACA,IAAMC,eAAe,GAAGC,6BAAH,KAAA,IAAA,IAAGA,6BAAH,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,6BAAU,CAAED,eAApC;AAEO,IAAME,mBAAmB,GAAG;EACjCC,MAAM,kBAACC,UAAD,EAA8C;IAClD,SAAA;;IACA,OAAO;MACLC,KAAK,EAAE,iBAAM;QACX,SAAA;;QACA,IAAIR,oBAAJ,EAA0B;UACxBG,eAAe,CAACI,UAAD,EAAaE,YAAK,CAACC,KAAnB,CAAfP;QACD,CAFD,MAEO;UACLQ,OAAO,CAACC,IAARD,CAAab,cAAba,CAAAA;QACD;MACF,CARI;MAULE,QAAQ,EAAE,oBAAM;QACd,SAAA;;QACA,IAAIb,oBAAJ,EAA0B;UACxBG,eAAe,CAACI,UAAD,EAAaE,YAAK,CAACK,MAAnB,CAAfX;QACD,CAFD,MAEO;UACLQ,OAAO,CAACC,IAARD,CAAab,cAAba,CAAAA;QACD;MACF,CAjBI;MAmBLI,IAAI,EAAE,gBAAM;QACV,SAAA;;QACA,IAAIf,oBAAJ,EAA0B;UACxBG,eAAe,CAACI,UAAD,EAAaE,YAAK,CAACO,MAAnB,CAAfb;QACD,CAFD,MAEO;UACLQ,OAAO,CAACC,IAARD,CAAab,cAAba,CAAAA;QACD;MACF,CA1BI;MA4BLM,GAAG,EAAE,eAAM;QACT,SAAA;;QACA,IAAIjB,oBAAJ,EAA0B;UACxBG,eAAe,CAACI,UAAD,EAAaE,YAAK,CAACS,GAAnB,CAAff;QACD,CAFD,MAEO;UACLQ,OAAO,CAACC,IAARD,CAAab,cAAba,CAAAA;QACD;MACF;IAnCI,CAAP;EAqCD;AAxCgC,CAA5B;AAAA","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\n// check if reanimated module is available, but look for useSharedValue as conditional\n// require of reanimated can sometimes return content of `utils.ts` file (?)\nconst REANIMATED_AVAILABLE = Reanimated?.useSharedValue !== undefined;\nconst setGestureState = Reanimated?.setGestureState;\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}